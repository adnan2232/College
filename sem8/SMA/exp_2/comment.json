{"_default": {"1": {"post_id": "12glkw4", "comment_id": "jfkvwx0", "parent_id": "t3_12glkw4", "body": "Hardware wasn't ready for Python in that time", "created_on": 1681054038.0, "upvotes": 5, "author_id": "22vat21u", "author_name": "DusikOff"}, "2": {"post_id": "12glkw4", "comment_id": "jfnha98", "parent_id": "t3_12glkw4", "body": "Because Python was developed with the conceit that memory is cheap and plentiful. It took time for consumer level hardware make this true.\n\n[Massive memory overhead: Numbers in Python and how NumPy helps](https://pythonspeed.com/articles/python-integers-memory/)", "created_on": 1681095316.0, "upvotes": 2, "author_id": "4wtjvsh6", "author_name": "FredVIII-DFH"}, "3": {"post_id": "12glkw4", "comment_id": "jflnf2e", "parent_id": "t3_12glkw4", "body": "Perl was *the* scripting language in the early-mid 2000s. I took a look at it and hated the syntax. Python made much more sense to me and a lot of other people but it took time for a critical mass of users to catch on. Add to that the massive increase in processing power and concern over developer productivity and you have a compelling case for Python.", "created_on": 1681065424.0, "upvotes": 2, "author_id": "4i9hp", "author_name": "tommasz"}, "4": {"post_id": "12glkw4", "comment_id": "jflbch7", "parent_id": "t3_12glkw4", "body": "I was a web developer between 2000 and 2010, and at that time, although Python was a better language than e.g. PHP, this latter was much better for web development. PHP was designed as a templating language (for C++), and coming from this angle, it was just simply better equiped for the web from the very beginning. In the meantime, web technology has evolved a lot, and also the Python ecosystem is way better than it was 10-20 years ago.\n\nThe same stands for Java and C#. The Python ecosystem was just simply not competitive against these behemots (in the early 2000ies).\n\nA programming language has to find a sweet spot on the market to be successful. And while Guido van Rossum and others have been working on the numerical capabilities of Python since 1995, Python started to enjoy this benefit only after the launch of Pandas (I guess).", "created_on": 1681060425.0, "upvotes": 2, "author_id": "8hi6986p", "author_name": "Asleep-Dress-3578"}, "5": {"post_id": "12glkw4", "comment_id": "jfmk972", "parent_id": "t1_jflbch7", "body": "Adding on to this from my POV, early web in the early 2000's was Java/JSP if you were enterprise, ASP if you were a Windows shop, and LAMp(hp) if you were startups aka poor aka bleeding edge.  A few years prior to that timeframe, ColdFusion had great market share in both enterprise and Windows.  A few years after that, .NET became dominant after ASP, but the core three were still more or less the same.  Ruby might have chipped away at PHP, but clearly that never overtook it.\n\nPython was kind of \"just around.\"  Plone was its only killer app, but it kept it alive.  CMS was a big enterprise need that didn't have an elegant solution, and so people were trying everything.  Google was using it for a lot of scientific research and from there, it crept into the research world, because the syntax is easy, where it got a stranglehold.  (Just five years ago, I was working at a bioresearch lab, and I can't tell you how much bad Python 2.7 was still around.). Being in research, it serendipitously positioned itself into the math and AI boom that we're in today, and it's everywhere.\n\nSo basically, Plone and Google kept it alive long enough for dumb luck to take over and show people how good it was.  Otherwise, I think it'd just be another niche academic language.", "created_on": 1681079618.0, "upvotes": 3, "author_id": "380he", "author_name": "snapetom"}, "6": {"post_id": "12glkw4", "comment_id": "jfl1jep", "parent_id": "t3_12glkw4", "body": "I did some stuff in Python and at the time there was some consulting company doing stuff in Java who decided to go all out spreading FUD about Python and my work. Probably there was a lot of that around. Joke\u2019s on them I do stuff in Python now somewhere else for way more money, meanwhile they are stuck maintaining their Java code not to mention even worse legacy code in an obscure and terrible language.", "created_on": 1681056384.0, "upvotes": 2, "author_id": "w9ou99g7", "author_name": "Bling-Crosby"}, "7": {"post_id": "12glkw4", "comment_id": "jfm82hb", "parent_id": "t3_12glkw4", "body": "I was pitching Python-based CMS (Plone) for a government project in around ~2006. The project worth was somewhere between 100k - 1M EUR.\n\nIt was public bidding and a paper-intensive process; we delivered them a 200 pages proposal. We got invited to the steering committee meeting who was deciding who will get the project.\n\nThey asked the questions\n\n- What is Python\n\n- Does it run on Java\n\n- Does it use Oracle database\n\nIt was a trip wasted, not to mention the work to put the proposal together.\n\nWe did not get the project. A lot of things have improved in 20 years, but this was the atmosphere of 90s and early 00s. In 00s Linux started to become popular and in 10s Python and JavaScript both become \"professional grade\" languages.\n\nAfter dealing with software for a couple of decades I believe it all boils down the trust and awareness. It needs to work and it needs to work for many years before people can put their trust in it. Enough people need to talk about it. This is also why Lisp, Haskell, etc. are not successful.", "created_on": 1681074291.0, "upvotes": 4, "author_id": "b0r61", "author_name": "moo9001"}, "8": {"post_id": "12glkw4", "comment_id": "jfmfews", "parent_id": "t1_jfm82hb", "body": "Plenty of people people in the early/mid 2000s made their living building Zope and Plone stuff on contract for the US government. They had figured out how to tell the procurement people the right things, and build their apps to comply with all the regulations, and did quite well.\n\nI knew quite a few of them when I was starting out, and met more as time went on and they started switching over to Django.", "created_on": 1681077452.0, "upvotes": 3, "author_id": "1s6u", "author_name": "ubernostrum"}, "9": {"post_id": "12glkw4", "comment_id": "jfkusw0", "parent_id": "t3_12glkw4", "body": "Took a long time for dinosaurs to adopt OOP.", "created_on": 1681053569.0, "upvotes": 9, "author_id": "n0q5v7sz", "author_name": "CevicheCabbage"}, "10": {"post_id": "12glkw4", "comment_id": "jfkzz2m", "parent_id": "t1_jfkusw0", "body": "same goes for PHP", "created_on": 1681055748.0, "upvotes": 4, "author_id": "3mjzuttw", "author_name": "Barn07"}, "11": {"post_id": "12glkw4", "comment_id": "jflshzn", "parent_id": "t1_jfkusw0", "body": "Wait until you move away from it", "created_on": 1681067605.0, "upvotes": 5, "author_id": "dkznt", "author_name": "canibanoglu"}, "12": {"post_id": "12glkw4", "comment_id": "jflhy57", "parent_id": "t1_jfkusw0", "body": "OOP is abused today, used on problems that another paradigm could solve easier, better, and safer", "created_on": 1681063115.0, "upvotes": 7, "author_id": "9xh94vz", "author_name": "jisuskraist"}, "13": {"post_id": "12glkw4", "comment_id": "jfl69hb", "parent_id": "t3_12glkw4", "body": "Two trends existed in myopic view: ( like literally this is what I remember)\n\nTrend 1: Google started using it on the backend. Big companies like that quickly change the math on python. Before a big company adopts it criticism are answered with debate. After a a big company adopts it criticism are answered with ... Yeah but Google uses it.\n\nTrend 2: killer data science features caused the final explosion. Sklearn had an big overtime impact on machine learning that literally was not as well executed in any other languages. R was piece meal. C++ was comically complicated. Etc. Then came deep learning and Google again pushed python way out to the lead on deep learning with tensorflow. There were competitors but there's no doubt in my mind who won.  Keras simplified it for the masses. If r had been the stand out deep learning platform early. I dunno what happens to history.\n\nSo why python? Google. You might ask why they converted YouTube to python and probably get a but wait there is more! But I don't know.", "created_on": 1681058336.0, "upvotes": 9, "author_id": "5q7hwlqb", "author_name": "quts3"}, "14": {"post_id": "12glkw4", "comment_id": "jfl5o6m", "parent_id": "t3_12glkw4", "body": "Java started out with a huge corporate backing, and a goal of literally running everywhere, but then leveled off a bit as the hype died down, and therefore hasn't been marketed or improved as aggressively. I would say it's still improving and possibly growing, but it's bogged down with the technical debt of its corporate origin and C++ -lite design and the ways people have adapted to use it.\n\nPython started out being used for one person's needs and just kept gradually improving and growing, even shedding its skin with the 2-3 transition so it could drop the technical debt of its early design. While it has been marketed, its growth and improvement have been more organic and steady. As a result it took longer to get popular and then reach its current size.", "created_on": 1681058088.0, "upvotes": 5, "author_id": "1hwcg", "author_name": "ddollarsign"}, "15": {"post_id": "12glkw4", "comment_id": "jfoxe42", "parent_id": "t1_jfl5o6m", "body": "I know that in the long run 2-3 was a good thing but man it still fucks things up. Try using Ansible across systems of various ages with modules of various adaptability\u2026", "created_on": 1681132559.0, "upvotes": 2, "author_id": "e0cou", "author_name": "LifeHasLeft"}, "16": {"post_id": "12glkw4", "comment_id": "jfksnh7", "parent_id": "t3_12glkw4", "body": "Performance went bye bye with dynamic typing at that time", "created_on": 1681052637.0, "upvotes": 26, "author_id": "cna2c5we", "author_name": "stupid_design"}, "17": {"post_id": "12glkw4", "comment_id": "jfktq5f", "parent_id": "t1_jfksnh7", "body": "right, python was (and is) extremely slow.  Like an order of magnitude too slow.   Numpy makes it comparable to other languages, and that came out in 2005.", "created_on": 1681053102.0, "upvotes": 21, "author_id": "g7mpqsdg", "author_name": "NorthImpossible8906"}, "18": {"post_id": "12glkw4", "comment_id": "jfl9sap", "parent_id": "t3_12glkw4", "body": "Multiple reasons, here's the timeline that I recall:\n\n   * mid-90s:  many (most?) programmers weren't yet sold on interpreted languages and dynamic typing yet.  VB was useful, but wasn't well-respected, perl was mostly for reporting or other small utilities, and rexx was super-cool, but didn't have a huge reputation on unix & windows.\n   * late-90s: Perl established the legitimacy of interpreted languages for backend application development.  Few people had heard of python by this time. \n   * early-00s: many people started looking for a light-weight alternative to the heavy boilerplate of Java and something more readable, and with stricter tyuping than Perl - and started using Python. Python was very capable, jython looked promising.  Given that the Perl community really made the case for interpreted languages to be taken seriously - there was an *enormous* amount of hostility towards Python from the Perl community.\n   * late-00s: python's future seemed questionable given the enthusiasm and rapid growth of the ruby-community once rails took off.  Python's migration to v3 was a bit of disaster but it finally hit the tipping point fairly suddenly right at the middle of the decade which really opened it up for growth.\n   * 10s: data science began taking off and python was the preferred language, python got picked up by a lot of schools, ruby declined, and the trajectory was set.\n\nEDIT; fixed some typos, added a bit", "created_on": 1681059777.0, "upvotes": 13, "author_id": "3fv3g", "author_name": "kenfar"}, "19": {"post_id": "12glkw4", "comment_id": "jfkxc5j", "parent_id": "t3_12glkw4", "body": "It had no marketing department and it had to prove itself against Perl for sysadmin scripting, Ruby for OOP programming, PHP for web programming, FORTRAN for numeric computing, etc.\n\nOne by one it overcame each of them over time. Which is actually a miracle, given how few programming languages achieve what Python has.", "created_on": 1681054644.0, "upvotes": 41, "author_id": "u1ac", "author_name": "Smallpaul"}, "20": {"post_id": "12glkw4", "comment_id": "jfl58l4", "parent_id": "t1_jfkxc5j", "body": "I don't think it beats php for web. The problem with php is you can ONLY do web, while python can do many more things", "created_on": 1681057909.0, "upvotes": 2, "author_id": "4pihf", "author_name": "thereshegoes"}, "21": {"post_id": "12glkw4", "comment_id": "jflc4h7", "parent_id": "t3_12glkw4", "body": "As someone who has been with Python from around 2003 this whole thread breaks my head. The assumptions are just wildly off base. The question you should ask OP is how did Python get so big at all.\n\nPython was an outsider, backed by no large companies, it grew up in a time of dominant tech being proprietary. \u201cOpen source\u201d was scary and confusing to most of the industry. We were exceptionally avant-garde for trying to run Python in production environments.\n\nIt still did well because it\u2019s proven time and again to be superior. That\u2019s all.", "created_on": 1681060749.0, "upvotes": 18, "author_id": "xi5g", "author_name": "deadwisdom"}, "22": {"post_id": "12glkw4", "comment_id": "jfkx62k", "parent_id": "t3_12glkw4", "body": "Bg: I've programmed professionaly for ~20 years. Ive been paid to write 9 different programming languages and have used 19. I currently do almost all my work in python. \n\n1. Python 1 was primitive. It wasn't much better than perl, and worse in some ways. Missing basics like classes. So many looked, and moved on, for quite a while\n2. Performance was and is $hit, comparatively. It needed hardware to catch up to make it's absolute performance acceptable for many purposes.\n3. Library {standard and otherwise} needed a while to build. General purpose languages need a large library to become effective for general use. No one wants to deal with raw sockets every time you need to connect to a network resource, etc. \n\nThere was clearly a need for better options at the time.\nMatlab was rapidly gaining in popularity in 1994, esp for numeric programming: Python has largely supplanted it for many purposes. \nJava was cross platform, intended to be a gp Lang for many things (though not scripting) \nC# doomed as win only\n\nPython's ability to move from simple, interpreted, but complete scripting lang , all the way to large complex application is fairly unique. \n\nThe only thing that python has lacked, until recently, is decent ui options. There are various web or none web-based ones out there, but it feels like that is close to being solved. \n\nI'm sure many will disagree with my opinions here: save your time. I'm not really interested in debating. Just throwing out my 2 cents.", "created_on": 1681054572.0, "upvotes": 89, "author_id": "j34pzwcy", "author_name": "gravity_rose"}, "23": {"post_id": "12glkw4", "comment_id": "jfn6y4n", "parent_id": "t1_jfkx62k", "body": "As someone who uses matlab every day to design airplanes, we are never going to be able to fully transition to python no matter how much I push for it. Simulink not talking to the python API fast enough (pytorch sucks omg) and bode plots for control systems. Will never happen and bums me out :(", "created_on": 1681090166.0, "upvotes": 1, "author_id": "2ww74vu", "author_name": "arvarnargul"}, "24": {"post_id": "12glkw4", "comment_id": "jfn6qii", "parent_id": "t1_jfkx62k", "body": "It also took a long time for people to accept the \"white space as control flow\" thing.  That used to be the standard objection to the language.", "created_on": 1681090061.0, "upvotes": 1, "author_id": "8i39sg", "author_name": "ucblockhead"}, "25": {"post_id": "12glkw4", "comment_id": "jfl54f1", "parent_id": "t1_jfkx62k", "body": "Wow, that experience is massive! What are some books you recommend to improve general programming skills at work? Like, a book or resource that you went through and it resonated with daily routine coding work.", "created_on": 1681057859.0, "upvotes": 0, "author_id": "1047pi", "author_name": "AbdussamiT"}, "26": {"post_id": "12glkw4", "comment_id": "jflebut", "parent_id": "t1_jfkx62k", "body": "I don\u2019t think pythons ui situation has gotten any better, instead the industry has moved away from native apps/guis so it just doesn\u2019t matter anymore.", "created_on": 1681061635.0, "upvotes": 2, "author_id": "5odgp", "author_name": "Alphasite"}, "27": {"post_id": "12glkw4", "comment_id": "jfowadl", "parent_id": "t1_jfkx62k", "body": "When you view python as an easy to read alternative to perl, a lot of design paradigms make sense.", "created_on": 1681132002.0, "upvotes": 2, "author_id": "e0cou", "author_name": "LifeHasLeft"}, "28": {"post_id": "12glkw4", "comment_id": "jfoe3n8", "parent_id": "t1_jfkx62k", "body": "> The only thing that python has lacked, until recently, is decent ui options. There are various web or none web-based ones out there, but it feels like that is close to being solved.\n\nI saw several popular Gnome libraries written entirely in Python, also several webs are using Flask, FastAPi, MkDocs or LiteStar*\n\nI don't use Windows/MacOs/KDE so I'm not sure about them", "created_on": 1681119833.0, "upvotes": 2, "author_id": "dzdhs", "author_name": "Saphyel"}, "29": {"post_id": "12glkw4", "comment_id": "jfkz0cp", "parent_id": "t1_jfkx62k", "body": "Which module is the GUI solution now for python?", "created_on": 1681055351.0, "upvotes": 6, "author_id": "9i8k071p", "author_name": "Classic_Department42"}, "30": {"post_id": "12glkw4", "comment_id": "jfkzct9", "parent_id": "t1_jfkx62k", "body": "There are some really good points here. I\u2019d say the other was traction via computer science programs. In the US, in the early 90s, most comp sci curriculum was taught with Pascal. By the mid 90s, Pascal was viewed as an inferior language for teaching OO concepts, and there was some rub with Borland at the time too. At that time, CS departments shifted to where C++ would have been the language of the curriculum, but some did pick up Java early. By the late 90s, Java was the curriculum language for practically every CS department used.\n\nIf CS professors had seen Python as the alternative to Pascal, we\u2019d be having a different conversation.", "created_on": 1681055494.0, "upvotes": 16, "author_id": "6csnaw5o", "author_name": "Material-Resource-19"}, "31": {"post_id": "12glkw4", "comment_id": "jfl7mcx", "parent_id": "t1_jfkx62k", "body": "In 2013 or so when the company needed some scientific computing power, I sampled a few options by creating and manipulating a 10GB matrix.\n\nNumpy did it effortlessly and none of other options could even handle it.", "created_on": 1681058886.0, "upvotes": 9, "author_id": "5ej1ie", "author_name": "dudinax"}, "32": {"post_id": "12glkw4", "comment_id": "jfl3349", "parent_id": "t1_jfkx62k", "body": "> Matlab was rapidly gaining in popularity in 1994, esp for numeric programming:\n\nI feel like lots of the use of programming for these purposes was at university level where matlab was free for the users. In the past 15 years it seems like a lot of this type of programming has expanded far beyond universities and when people look for tools suddenly Matlab's cost was a barrier vs free python.", "created_on": 1681057023.0, "upvotes": 29, "author_id": "8oej0", "author_name": "monstimal"}, "33": {"post_id": "12glkw4", "comment_id": "jfl6tds", "parent_id": "t3_12glkw4", "body": "Since I haven\u2019t seen this touched on:\n\nPython, being interpreted, fit well early on in the scripting space.  However Perl already had a solid lock on the space in Unix/Linux.  But Perl was stagnating, and trying to do anything remotely complex in it made it difficult to maintain.\n\nPerl 6 became a disaster, and Linux distributions began to pick up, and use Python for many of their internal scripts and tools, because Python was just way more readable, and easier for newer devs to write in.  Which helped even more as those projects grew.", "created_on": 1681058566.0, "upvotes": 36, "author_id": "4b12m", "author_name": "schplat"}, "34": {"post_id": "12glkw4", "comment_id": "jfl7ond", "parent_id": "t1_jfl6tds", "body": "I consider myself a fairly adaptable person with programming aptitude and i was going to learn perl once. After a few days with the camel book i was like screw perl this language was written by a madman.\n\nEven ASM made more sense to me then perl.", "created_on": 1681058913.0, "upvotes": 14, "author_id": "5q7hwlqb", "author_name": "quts3"}, "35": {"post_id": "12glkw4", "comment_id": "jfkziqc", "parent_id": "t3_12glkw4", "body": "libraries are what makes Python so powerful, getting a ecosystem of developers and packages takes time", "created_on": 1681055562.0, "upvotes": 39, "author_id": "v5tt4", "author_name": "Ruin369"}, "36": {"post_id": "12glkw4", "comment_id": "jfkuf90", "parent_id": "t3_12glkw4", "body": "Computers got really fucking fast and suddenly problems like man this took a lot of time to write starting becoming a larger concern. \n\n2-3 transition was terrible. \n\nMajor companies use it new people started using it realzied it was fuckign awesome and kept using it. \n\nI got absorbed into python from java after watching [david beazley's metaprogramming talk.](https://www.youtube.com/watch?v=sPiWg5jSoZI) Nothing has ever set my mind on fire quiet like that video did. Haven't put the language down since.", "created_on": 1681053405.0, "upvotes": 175, "author_id": "13o7qq", "author_name": "turtle4499"}, "37": {"post_id": "12glkw4", "comment_id": "jfpgiir", "parent_id": "t1_jfkuf90", "body": ">I got absorbed into python from java after watching david beazley's metaprogramming talk.\n\nThat guy is going to hell.\n\nThanks for sharing that.", "created_on": 1681140886.0, "upvotes": 1, "author_id": "4a167g2", "author_name": "logarithmnblues"}, "38": {"post_id": "12glkw4", "comment_id": "jfllqmt", "parent_id": "t1_jfkuf90", "body": "Dude, learn how to not use run-on sentences.", "created_on": 1681064714.0, "upvotes": -13, "author_id": "79mmh", "author_name": "lavahot"}, "39": {"post_id": "12glkw4", "comment_id": "jfleedr", "parent_id": "t1_jfkuf90", "body": "Not only did computers get faster, programming switched from being bottlenecked by local compute speed to waiting on network resources. Intensive computations in python code get delegated to either C++ libraries or outside services today. Python filled the space for glue code when perl dropped the ball.", "created_on": 1681061662.0, "upvotes": 35, "author_id": "44bsk", "author_name": "Megatron_McLargeHuge"}, "40": {"post_id": "12glkw4", "comment_id": "jfl2i8u", "parent_id": "t1_jfkuf90", "body": "> Computers got really fucking fast and suddenly problems like man this took a lot of time to write starting becoming a larger concern.\n\nThis is, I think, the crux of why python got big through the aughts. Computers between the late 1990s and the late aughts got a whole hell of a lot faster so pythons performance problems mostly went away, and its ease and speed of development and deployment suddenly got to be a big factor.", "created_on": 1681056786.0, "upvotes": 57, "author_id": "9qael", "author_name": "jet_heller"}, "41": {"post_id": "12glkw4", "comment_id": "jfl1iqd", "parent_id": "t3_12glkw4", "body": "Check how python was invented https://www.artima.com/articles/the-making-of-python - it was not meant for professional developers, but for people who need programming to help them in their professional tasks. That's probably why python has a long tradition in data science - one can argue it ended up on the backend by accident, because the community picked it up and created frameworks for it. To this day I think the spirit is preserved, check how PEPs get reviewed and sometimes rejected, there is always a great attention at keeping python accessible ; and as we know, it's balanced with more advanced features making it viable at enterprise level such as type annotations.\n\nHonestly we should be more asking why it survived, continues to thrive and evolve. See how many langages are invented every year https://en.wikipedia.org/wiki/Timeline_of_programming_languages . Most programming languages are meant to be forgotten, really.", "created_on": 1681056377.0, "upvotes": 53, "author_id": "2rzmw", "author_name": "aikii"}, "42": {"post_id": "12glkw4", "comment_id": "jfkt513", "parent_id": "t3_12glkw4", "body": "Python was seen as an also ran scripting language, like Lua today. People looked at it and said it is not Perl", "created_on": 1681052850.0, "upvotes": 230, "author_id": "mnd4j", "author_name": "drwebb"}, "43": {"post_id": "12glkw4", "comment_id": "jfp57e6", "parent_id": "t1_jfkt513", "body": "I looked at Python and said \"It's not Perl - GREAT!\"", "created_on": 1681136177.0, "upvotes": 1, "author_id": "mzeiy", "author_name": "Oerthling"}, "44": {"post_id": "12glkw4", "comment_id": "jfnf016", "parent_id": "t1_jfkt513", "body": ">Python was seen as an also ran scripting language,\n\nThis was me. Several people over the years told me they liked Python a lot more than Perl. But if already sunk years into Perl, and a scripting language was a scripting language. \n\nThen I picked up a side gig that forced me to use Python. I never looked back.", "created_on": 1681094131.0, "upvotes": 1, "author_id": "8looig91", "author_name": "RedbloodJarvey"}, "45": {"post_id": "12glkw4", "comment_id": "jflvtnk", "parent_id": "t1_jfkt513", "body": "I had exactly this discussion, oh almost 20 years ago, with a Perl enthusiast.", "created_on": 1681069038.0, "upvotes": 2, "author_id": "4y0fyyrp", "author_name": "genuinemerit"}, "46": {"post_id": "12glkw4", "comment_id": "jfnajqa", "parent_id": "t1_jfkt513", "body": "I wouldn\u2019t call Lua an also-ran as it is well established in certain niche applications like UIs, especially for video games.", "created_on": 1681091899.0, "upvotes": 2, "author_id": "4e1oo3rx", "author_name": "DonkeyTron42"}, "47": {"post_id": "12glkw4", "comment_id": "jflca9h", "parent_id": "t1_jfkt513", "body": "I was under the impression that Perl's issues between version compatibility ended up paving the way for Python to step in as the de-facto scripting language.", "created_on": 1681060812.0, "upvotes": 3, "author_id": "3h4z3", "author_name": "Deto"}, "48": {"post_id": "12glkw4", "comment_id": "jfl2gi5", "parent_id": "t1_jfkt513", "body": "I had a hard time switching from perl to python at first because perl (without strict) was such a wild west of coding options. You could write just about anything and it would compile and run, meanwhile python would fail to run due to whitespace. It was a mental hurdle at first. I do miss data::dumper and the regex engine/syntax", "created_on": 1681056766.0, "upvotes": 9, "author_id": "nwo4pxo", "author_name": "LittleMlem"}, "49": {"post_id": "12glkw4", "comment_id": "jfmaozt", "parent_id": "t1_jfkt513", "body": "> People looked at it and said it is not Perl\n\nSome of us saw that as a major benefit. I started using it around 1.5, and it changed my life by freeing me from the nightmare of trying to code stuff in Perl. \n\nNever looked back after that moment.", "created_on": 1681075417.0, "upvotes": 6, "author_id": "35xl4", "author_name": "thesolitaire"}, "50": {"post_id": "12glkw4", "comment_id": "jfkthju", "parent_id": "t1_jfkt513", "body": "I'm not familiar with Lua.  What do mean by \"also ran scripting language\"?\n\nWhat caused people to give Python a second look?", "created_on": 1681052998.0, "upvotes": 41, "author_id": "von3w6y2", "author_name": "TheBodyPolitic1"}, "51": {"post_id": "12glkw4", "comment_id": "jfkt974", "parent_id": "t3_12glkw4", "body": "Besides the lack of enterprise backing early on, have you seen python 1.x?.\n\nI remember I programmed some stuff not that early, but early, could have been 2005 or so. Numpy did not exist yet, it was \"numeric\" and it was quite rough, list comprenhensions did not exist, I think context managers did not exist...\n\nPython before 2.7 was a far cry from what came to be after 2.7. Also all initial 3.x versions were really buggy until 3.4-5 and then finally 3.6 landed.", "created_on": 1681052898.0, "upvotes": 384, "author_id": "qcxnj", "author_name": "glacierre2"}, "52": {"post_id": "12glkw4", "comment_id": "jfmoyfx", "parent_id": "t1_jfkt974", "body": "What value do context managers really bring? It's just a way to run two functions without typing them yourself. Context manager is syntactic sugar at best. It's competent programming that makes sure the objects which can be used with context managers are easy to use. At the end of the day it's just an automated call of open and close.\n\nSame for list comprehensions. Those just make your code writing slightly more efficient, they don't provide power or paradigm shifts in the scope of usability.\n\nDo you mean that lists weren't mutable or some other facet of the language relating to those small conveniences?", "created_on": 1681081741.0, "upvotes": -8, "author_id": "14bnji", "author_name": "Panda_Mon"}, "53": {"post_id": "12glkw4", "comment_id": "jfmwt07", "parent_id": "t1_jfkt974", "body": "I used Python in 1999 to write some server side app stuff for managing a DNS environment.  Python was pretty slow back then.  Much slower than it is now.   I only used it because I could not stand Perl.  It was viewed as more of a toy language for a while, since it started out as an educational tool.  \n\nAlso, during that time C++ was king and Java was the new kid on the block.  We were excited to use Java and things like RMI so we wouldn't have to use Corba and C++.   No one really believed the write-once run anywhere sales pitch.  Java was REAL slow when it first came out.  Memory was tighter back then so giant JVM sizes could take down a machine.  Took a while for Java to hit it's stride.  Once BEA came on the scene with Weblogic then stuff took off.  J2EE blew Java up big time.\n\nSo, Python was not in anyone's minds at that time.  I was even seen as a weirdo for using it.  Took an act of god to get it installed on a BSD system at my place of employment at the time.", "created_on": 1681085368.0, "upvotes": 10, "author_id": "1pco", "author_name": "clueelf"}, "54": {"post_id": "12glkw4", "comment_id": "jfl4udb", "parent_id": "t1_jfkt974", "body": "This comment. If we can see it's popularity, it was 2.7 that made people especially mathematicians and scientists go\n.. oh, wow.", "created_on": 1681057743.0, "upvotes": 42, "author_id": "1047pi", "author_name": "AbdussamiT"}, "55": {"post_id": "12glkw4", "comment_id": "jfkwvp3", "parent_id": "t1_jfkt974", "body": "Interesting comment!  Thank you.  So basically Python got a lot better with 2.7 and people took notice.", "created_on": 1681054448.0, "upvotes": 31, "author_id": "von3w6y2", "author_name": "TheBodyPolitic1"}, "56": {"post_id": "12glkw4", "comment_id": "jfkzqme", "parent_id": "t1_jfkt974", "body": "I used python 0.6-0.8. Nothing like it is now. Tech support was emailing Guido Von Rossum with your questions. Seriously.\n\nIt was similar to Perl, not as powerful but easier to read syntax.", "created_on": 1681055650.0, "upvotes": 242, "author_id": "32dfj", "author_name": "thewileyone"}, "57": {"post_id": "12glkw4", "comment_id": "jfks7r6", "parent_id": "t3_12glkw4", "body": "Java had this company called Sun marketing it.", "created_on": 1681052446.0, "upvotes": 917, "author_id": "3484a", "author_name": "robvas"}, "58": {"post_id": "12glkw4", "comment_id": "jfnxolg", "parent_id": "t1_jfks7r6", "body": "We have to start calling Python as JavaPython, as JavaScript did it with LiveScript.", "created_on": 1681105708.0, "upvotes": 1, "author_id": "tu4zyl8z", "author_name": "_massif_"}, "59": {"post_id": "12glkw4", "comment_id": "jfnvotv", "parent_id": "t1_jfks7r6", "body": "Java was incredibly popular because it filled a very important need at the time. Write once, run anywhere sounds quaint now but it was a really big deal then. It\u2019s important to remember that Linux was a hobbyist OS at the time and it was hard to get most companies away from Microsoft products.", "created_on": 1681104194.0, "upvotes": 1, "author_id": "5xges", "author_name": "atomly"}, "60": {"post_id": "12glkw4", "comment_id": "jfktbt2", "parent_id": "t1_jfks7r6", "body": "Fair point, but Python became popular and I can't recall ( correct me if I am wrong ) a company ever promoting Python, at least not as hard as Sun promoted Java.", "created_on": 1681052930.0, "upvotes": 18, "author_id": "von3w6y2", "author_name": "TheBodyPolitic1"}, "61": {"post_id": "12glkw4", "comment_id": "jflq4yt", "parent_id": "t1_jfks7r6", "body": "I'm wondering if Java started to loose popularity after it was bought out by Oracle in 2010-- who then filed a lawsuits against Java clones (Google's Android SDK).", "created_on": 1681066584.0, "upvotes": 11, "author_id": "gcv69", "author_name": "roamn"}, "62": {"post_id": "12glkw4", "comment_id": "jfl01if", "parent_id": "t1_jfks7r6", "body": "To further this comment, Sun had a $500 million marketing campaign for Java.\n\nhttps://www.theregister.com/2003/06/09/sun_preps_500m_java_brand/", "created_on": 1681055777.0, "upvotes": 368, "author_id": "cmsdp", "author_name": "Agent281"}, "63": {"post_id": "12hj9oc", "comment_id": "jfr4m0w", "parent_id": "t3_12hj9oc", "body": "Thank you", "created_on": 1681164788.0, "upvotes": 2, "author_id": "1d58hcx2", "author_name": "qmahmood"}, "64": {"post_id": "12hj9oc", "comment_id": "jfr2hkz", "parent_id": "t3_12hj9oc", "body": "Thx mate <3", "created_on": 1681163872.0, "upvotes": 2, "author_id": "zj582", "author_name": "Corbrum"}, "65": {"post_id": "12hj9oc", "comment_id": "jfqzqlx", "parent_id": "t3_12hj9oc", "body": "Thanks", "created_on": 1681162718.0, "upvotes": 2, "author_id": "4pynu", "author_name": "this_human"}, "66": {"post_id": "12hj9oc", "comment_id": "jfqnn2l", "parent_id": "t3_12hj9oc", "body": "Thank you very much!! Really useful", "created_on": 1681157824.0, "upvotes": 2, "author_id": "gclnula2", "author_name": "LongjumpingPhysics76"}, "67": {"post_id": "12hj9oc", "comment_id": "jfqf9cs", "parent_id": "t3_12hj9oc", "body": "Great, thank you!", "created_on": 1681154503.0, "upvotes": 2, "author_id": "pfd4h", "author_name": "GreenFractal"}, "68": {"post_id": "12hj9oc", "comment_id": "jfqf125", "parent_id": "t3_12hj9oc", "body": "Thank you so much, I really wanted to learn more about APIs so this couldn't have come at a better time!", "created_on": 1681154413.0, "upvotes": 2, "author_id": "4hv1urrf", "author_name": "arman7503"}, "69": {"post_id": "12hj9oc", "comment_id": "jfqf5m3", "parent_id": "t1_jfqf125", "body": "You're welcome! Good luck!", "created_on": 1681154462.0, "upvotes": 2, "author_id": "shnqm", "author_name": "MetonymyQT"}, "70": {"post_id": "12hj9oc", "comment_id": "jfqekuq", "parent_id": "t3_12hj9oc", "body": "Thank you for this, I\u2019ve been learning Django for a lot time now but I\u2019m seeing more and more job posts with fast api now so this is ideal, thanks!", "created_on": 1681154234.0, "upvotes": 2, "author_id": "92hmndzs", "author_name": "DrMantisTabogon"}, "71": {"post_id": "12hj9oc", "comment_id": "jfqf4je", "parent_id": "t1_jfqekuq", "body": "Hope it brings some value to you! Good luck!", "created_on": 1681154450.0, "upvotes": 2, "author_id": "shnqm", "author_name": "MetonymyQT"}, "72": {"post_id": "12hj9oc", "comment_id": "jfq8fzk", "parent_id": "t3_12hj9oc", "body": "Thanks!", "created_on": 1681151804.0, "upvotes": 2, "author_id": "4vadl", "author_name": "derFunkatron"}, "73": {"post_id": "12hj9oc", "comment_id": "jfq9g5q", "parent_id": "t1_jfq8fzk", "body": "You\u2019re welcome!", "created_on": 1681152199.0, "upvotes": 1, "author_id": "shnqm", "author_name": "MetonymyQT"}, "74": {"post_id": "12hj9oc", "comment_id": "jfq5vq1", "parent_id": "t3_12hj9oc", "body": "Thank you!", "created_on": 1681150805.0, "upvotes": 2, "author_id": "yxv5rye", "author_name": "wingwai"}, "75": {"post_id": "12hj9oc", "comment_id": "jfq94bz", "parent_id": "t1_jfq5vq1", "body": "You\u2019re welcome!", "created_on": 1681152070.0, "upvotes": 1, "author_id": "shnqm", "author_name": "MetonymyQT"}, "76": {"post_id": "12hj9oc", "comment_id": "jfq5upk", "parent_id": "t3_12hj9oc", "body": "Thank you. I recently started a project in fast API having done most of my projects in Django. Will check it out!", "created_on": 1681150793.0, "upvotes": 2, "author_id": "2s83fouj", "author_name": "milanster"}, "77": {"post_id": "12hj9oc", "comment_id": "jfq9304", "parent_id": "t1_jfq5upk", "body": "You\u2019re welcome! Good luck with your project!", "created_on": 1681152055.0, "upvotes": 2, "author_id": "shnqm", "author_name": "MetonymyQT"}, "78": {"post_id": "12hj9oc", "comment_id": "jfq5e5i", "parent_id": "t3_12hj9oc", "body": "Thanks a lot!", "created_on": 1681150615.0, "upvotes": 2, "author_id": "u8j9r9ui", "author_name": "ptrck-star"}, "79": {"post_id": "12hj9oc", "comment_id": "jfq90pc", "parent_id": "t1_jfq5e5i", "body": "You\u2019re welcome!", "created_on": 1681152030.0, "upvotes": 1, "author_id": "shnqm", "author_name": "MetonymyQT"}, "80": {"post_id": "12hj9oc", "comment_id": "jfq4xmj", "parent_id": "t3_12hj9oc", "body": "Thanks a lot", "created_on": 1681150434.0, "upvotes": 2, "author_id": "jwqae", "author_name": "nelsinho527"}, "81": {"post_id": "12hj9oc", "comment_id": "jfq8zqk", "parent_id": "t1_jfq4xmj", "body": "You\u2019re welcome!", "created_on": 1681152019.0, "upvotes": 1, "author_id": "shnqm", "author_name": "MetonymyQT"}, "82": {"post_id": "12hj9oc", "comment_id": "jfpyog8", "parent_id": "t3_12hj9oc", "body": "Thank you!", "created_on": 1681148016.0, "upvotes": 2, "author_id": "vgedvkkr", "author_name": "hhhx33"}, "83": {"post_id": "12hj9oc", "comment_id": "jfq0ae7", "parent_id": "t1_jfpyog8", "body": "You\u2019re welcome!", "created_on": 1681148636.0, "upvotes": 2, "author_id": "shnqm", "author_name": "MetonymyQT"}, "84": {"post_id": "12hj9oc", "comment_id": "jfpogs4", "parent_id": "t3_12hj9oc", "body": "Thank you!!", "created_on": 1681144055.0, "upvotes": 2, "author_id": "lxgxc", "author_name": "23sanddungarees"}, "85": {"post_id": "12hj9oc", "comment_id": "jfpvtfc", "parent_id": "t1_jfpogs4", "body": "You're welcome! :D", "created_on": 1681146920.0, "upvotes": 1, "author_id": "shnqm", "author_name": "MetonymyQT"}, "86": {"post_id": "12hj9oc", "comment_id": "jfpk4ds", "parent_id": "t3_12hj9oc", "body": "[deleted]", "created_on": 1681142324.0, "upvotes": 2, "author_id": "deleted", "author_name": "deleted"}, "87": {"post_id": "12hj9oc", "comment_id": "jfpknec", "parent_id": "t1_jfpk4ds", "body": "Good luck!", "created_on": 1681142533.0, "upvotes": 1, "author_id": "shnqm", "author_name": "MetonymyQT"}, "88": {"post_id": "12hj9oc", "comment_id": "jfpghib", "parent_id": "t3_12hj9oc", "body": "Thanks. U have docker thats nice, others as i saw dont, thats a plus", "created_on": 1681140874.0, "upvotes": 3, "author_id": "603k4mp1c", "author_name": "Numerous-Stomach-NEW"}, "89": {"post_id": "12hj9oc", "comment_id": "jfpi2j8", "parent_id": "t1_jfpghib", "body": "Yes, unfortunately it is just basic docker commands to get you started.", "created_on": 1681141505.0, "upvotes": 2, "author_id": "shnqm", "author_name": "MetonymyQT"}, "90": {"post_id": "12hj9oc", "comment_id": "jfpv7lf", "parent_id": "t3_12hj9oc", "body": "Awesome! This is exactly the training I need for an application I\u2019m building. Thank you.", "created_on": 1681146685.0, "upvotes": 5, "author_id": "v98q7m1n", "author_name": "bryangoodrich"}, "91": {"post_id": "12hj9oc", "comment_id": "jfpvwr3", "parent_id": "t1_jfpv7lf", "body": "Hope it works out for you, good luck!", "created_on": 1681146955.0, "upvotes": 2, "author_id": "shnqm", "author_name": "MetonymyQT"}, "92": {"post_id": "12hj9oc", "comment_id": "jfpcj4t", "parent_id": "t3_12hj9oc", "body": "Thank you!", "created_on": 1681139258.0, "upvotes": 5, "author_id": "54akr", "author_name": "Syrup382"}, "93": {"post_id": "12hj9oc", "comment_id": "jfpck9f", "parent_id": "t1_jfpcj4t", "body": ">Thank you!\n\nYou're welcome!", "created_on": 1681139272.0, "upvotes": 1, "author_id": "ko79fwmf", "author_name": "exclaim_bot"}, "94": {"post_id": "12hj9oc", "comment_id": "jfpi3jp", "parent_id": "t1_jfpcj4t", "body": "You're welcome! :D", "created_on": 1681141516.0, "upvotes": 2, "author_id": "shnqm", "author_name": "MetonymyQT"}, "95": {"post_id": "12hj9oc", "comment_id": "jfpnjjx", "parent_id": "t3_12hj9oc", "body": "Thank you very much for the course \nMay I ask how much has your course made for you? \n\nAs a programmer, I need new ways to sustain myself. Do you believe blogging and making courses, all the hype aside, are financially worthwhile?", "created_on": 1681143687.0, "upvotes": 6, "author_id": "7vsprfh1", "author_name": "ChallengeEffective90"}, "96": {"post_id": "12hj9oc", "comment_id": "jfpvsij", "parent_id": "t1_jfpnjjx", "body": "You're welcome! I hope it provides you with some value. \n\nI've been blogging since 2018 and it made me a total of 5$ (\\~3$ after tax, someone bought me a coffee since I shared some HackTheBox solutions on my blog).\n\nThe course income depends on your course rating, topic and how many sales you can generate. If you refer people to the course you'll get 97% of the course price, if Udemy promotes the course and makes a sale you'll get 30%. For the FastAPI topic, the median monthly revenue is 100$ and top revenue is 1700$. I've made around double the median and I'm expecting the revenue to drop since last ratings I received weren't that good. \n\nAs a software developer my biggest income is from my salary, I couldn't sustain myself based on the course alone, but at least I covered my WP blog hosting fees.", "created_on": 1681146910.0, "upvotes": 37, "author_id": "shnqm", "author_name": "MetonymyQT"}, "97": {"post_id": "12hj9oc", "comment_id": "jfpkzkg", "parent_id": "t3_12hj9oc", "body": "Thank you very much. Very generous of you.", "created_on": 1681142666.0, "upvotes": 10, "author_id": "j1ymcyx8", "author_name": "realdealishere1"}, "98": {"post_id": "12hj9oc", "comment_id": "jfpl35k", "parent_id": "t1_jfpkzkg", "body": "You're welcome! I hope it provides you with some value.", "created_on": 1681142706.0, "upvotes": 6, "author_id": "shnqm", "author_name": "MetonymyQT"}, "99": {"post_id": "12hj9oc", "comment_id": "jfp51u1", "parent_id": "t3_12hj9oc", "body": "Thank you \ud83d\udc4d", "created_on": 1681136110.0, "upvotes": 24, "author_id": "p4oxcufl", "author_name": "You_Wen_AzzHu"}, "100": {"post_id": "12hj9oc", "comment_id": "jfpi397", "parent_id": "t1_jfp51u1", "body": "You're welcome! :D", "created_on": 1681141513.0, "upvotes": 13, "author_id": "shnqm", "author_name": "MetonymyQT"}, "101": {"post_id": "12egsoz", "comment_id": "jfeodok", "parent_id": "t3_12egsoz", "body": "Nice job I always love fun projects like these.", "created_on": 1680927045.0, "upvotes": 2, "author_id": "8q3vvjn6", "author_name": "Striking-Courage-182"}, "102": {"post_id": "12egsoz", "comment_id": "jff8pnc", "parent_id": "t1_jfeodok", "body": "Right! This is definitely not going on my resume but man it is fun to work on.", "created_on": 1680942568.0, "upvotes": 1, "author_id": "rs4dqilj", "author_name": "2broke2code"}, "103": {"post_id": "12egsoz", "comment_id": "jfehz2c", "parent_id": "t3_12egsoz", "body": "Cool project, but as a heads up, you should update your private key and purge creds.json from your repo. I\u2019m able to see your creds.json in your git history with your committed delete.", "created_on": 1680923394.0, "upvotes": 2, "author_id": "xbhxt", "author_name": "Underachiever457"}, "104": {"post_id": "12egsoz", "comment_id": "jff8t26", "parent_id": "t1_jfehz2c", "body": "Yeah true. They're not useful anymore but I have to look into how to delete them in my commits.", "created_on": 1680942651.0, "upvotes": 1, "author_id": "rs4dqilj", "author_name": "2broke2code"}, "105": {"post_id": "12egsoz", "comment_id": "jfedusk", "parent_id": "t3_12egsoz", "body": "\u201cDon't worry. You aren't even interesting enough to look like Michael Cera. If I saw you on the street I would never even remember you. Nobody would.\u201d\n\nI am going to go lie down for awhile.", "created_on": 1680921210.0, "upvotes": 2, "author_id": "swxarhm6", "author_name": "toomuchmucil"}, "106": {"post_id": "12egsoz", "comment_id": "jfdrd5f", "parent_id": "t3_12egsoz", "body": "[I shouldn\u2019t have been curious..](https://imgur.com/a/JqLMcdi)", "created_on": 1680910156.0, "upvotes": 2, "author_id": "lwfzjlnr", "author_name": "PokeReserves"}, "107": {"post_id": "12egsoz", "comment_id": "jfds8nn", "parent_id": "t1_jfdrd5f", "body": "C'mon you ain't gonna show us the photo?", "created_on": 1680910567.0, "upvotes": 3, "author_id": "rs4dqilj", "author_name": "2broke2code"}, "108": {"post_id": "12egsoz", "comment_id": "jfd9dxi", "parent_id": "t3_12egsoz", "body": "This is dope! I think it would be cool if it showed you who your lookalike was. Would add a bit of extra fun, and I'm sure it would be minimal additional code to display it on the front end.", "created_on": 1680902184.0, "upvotes": 2, "author_id": "1ci4rpj5", "author_name": "Lewis0981"}, "109": {"post_id": "12egsoz", "comment_id": "jfda1su", "parent_id": "t1_jfd9dxi", "body": "I did have it my first phase. It was so much fun to see how much you resemble someone else (ex- like having the exact same nose or eyes) \n\nI think I'll bring that option back up tmmrw.", "created_on": 1680902465.0, "upvotes": 2, "author_id": "rs4dqilj", "author_name": "2broke2code"}, "110": {"post_id": "12egsoz", "comment_id": "jfd5k45", "parent_id": "t3_12egsoz", "body": "It just said my post was removed?", "created_on": 1680900578.0, "upvotes": 2, "author_id": "3tlp0", "author_name": "philoponeria"}, "111": {"post_id": "12egsoz", "comment_id": "jfdhx6a", "parent_id": "t1_jfd5k45", "body": "After days of cleaning the data it still pulls those up. Sorry about that. Do try again with a different angle maybe.", "created_on": 1680905856.0, "upvotes": 1, "author_id": "rs4dqilj", "author_name": "2broke2code"}, "112": {"post_id": "12egsoz", "comment_id": "jfcexw8", "parent_id": "t3_12egsoz", "body": "yeesh this bot racist", "created_on": 1680889670.0, "upvotes": 9, "author_id": "jozy285b", "author_name": "DigThatData"}, "113": {"post_id": "12egsoz", "comment_id": "jfcxe25", "parent_id": "t1_jfcexw8", "body": "Lol come here looking for this \ud83d\ude02", "created_on": 1680897181.0, "upvotes": 2, "author_id": "6gy5zl37", "author_name": "zabumafew"}, "114": {"post_id": "12egsoz", "comment_id": "jfcw0by", "parent_id": "t1_jfcexw8", "body": "Garbage in, garbage out", "created_on": 1680896607.0, "upvotes": 16, "author_id": "crpi7efu", "author_name": "_ologies"}, "115": {"post_id": "12egsoz", "comment_id": "jfcvbqr", "parent_id": "t1_jfcexw8", "body": "It's almost a given with that subreddit data \ud83d\ude05", "created_on": 1680896323.0, "upvotes": 14, "author_id": "rs4dqilj", "author_name": "2broke2code"}, "116": {"post_id": "12egsoz", "comment_id": "jfdp70c", "parent_id": "t3_12egsoz", "body": "Great idea. Seriously, jealous of the idea.\n\nExecution seems to fall short in the examples I tried. Fairly random insults that seemed to be about features that were in an image that \"matched\" but the feature in question wasn't present (I got \"roasted\" about being homeless and my eyebrows on one image but it didn't make a ton of sense). In another image, the rules of the roastme forum were the response.\n\nI recommend you look at the problems and keep going! Try and better sub-divide/match the features of an image to the features of a roast post and this will be incredible. Very high level and fuzzy right now.", "created_on": 1680909143.0, "upvotes": 3, "author_id": "j20so", "author_name": "marr75"}, "117": {"post_id": "12egsoz", "comment_id": "jfdr25e", "parent_id": "t1_jfdp70c", "body": "Yeah the match image only works locally for me. it's some minor issue with the file paths I passed. I'll fix it soon.\n\nAlso I've had the idea for a year but just got around to doing it lol and yes it needs a lot of work. \n\nAs for the sub-divide, it's literally what I have planned for it. I'll breakdown the image into multiple features like predicted gender, colour, age, etc... and feed them into an LLM that would use the features to generate a more personalized roast rather than just spitting out existing comments.", "created_on": 1680910013.0, "upvotes": 3, "author_id": "rs4dqilj", "author_name": "2broke2code"}, "118": {"post_id": "12egsoz", "comment_id": "jfd0xc7", "parent_id": "t3_12egsoz", "body": "I\u2019m getting a \u201cservice unavailable\u201d response so it\u2019s for sure broken lol", "created_on": 1680898652.0, "upvotes": 3, "author_id": "hsilu", "author_name": "Oinohtna"}, "119": {"post_id": "12egsoz", "comment_id": "jfedku9", "parent_id": "t3_12egsoz", "body": "`__pycache__` in repo is sign of a newbie. Put it in your .gitignore \n\nI love the project though. Good job.", "created_on": 1680921064.0, "upvotes": 4, "author_id": "8umjm3t", "author_name": "AGI_69"}, "120": {"post_id": "12egsoz", "comment_id": "jfawzgo", "parent_id": "t3_12egsoz", "body": "If you're following all the hipster trends, are you really a hipster?\n\nYou look like you tut & roll your eyes at every mention of anything that happened after 2006.\n\nFlannel shirt, facial hair, and a barely visible chest tattoo. You're a spitting image of your mother.\n\nWe know that getting kicked out of The National wasn't easy for you, but can you please take your job at the coat check fucking seriously?", "created_on": 1680864999.0, "upvotes": 19, "author_id": "3miavl2n", "author_name": "Noshoesded"}, "121": {"post_id": "12egsoz", "comment_id": "jfbmtqj", "parent_id": "t3_12egsoz", "body": "Well done", "created_on": 1680878539.0, "upvotes": 6, "author_id": "aqtox4zh", "author_name": "Similar-Olive-8666"}, "122": {"post_id": "12egsoz", "comment_id": "jfc2we3", "parent_id": "t1_jfbmtqj", "body": "Thank you", "created_on": 1680884963.0, "upvotes": 5, "author_id": "rs4dqilj", "author_name": "2broke2code"}, "123": {"post_id": "12egsoz", "comment_id": "jfde9sg", "parent_id": "t3_12egsoz", "body": "\"I'd say bad fashion runs in your family but I doubt anyone runs in your family\" \ud83d\ude02\ud83d\ude02\ud83d\ude02\ud83d\ude2d\ud83d\ude2d\ud83d\ude2d", "created_on": 1680904273.0, "upvotes": 13, "author_id": "6yrj5", "author_name": "Aknnja"}, "124": {"post_id": "12egsoz", "comment_id": "jfdhpcy", "parent_id": "t1_jfde9sg", "body": "Ooof...", "created_on": 1680905760.0, "upvotes": 3, "author_id": "rs4dqilj", "author_name": "2broke2code"}, "125": {"post_id": "12egsoz", "comment_id": "jfawjdy", "parent_id": "t3_12egsoz", "body": "Looks like the barber already did\n\nI wondered what DJ Qualls' \"Before Meth\" pic looked like.\n\nIs Lloyd Christmas your father? \n\nYou look like you pick up children from the park, violate them and then go and brag about it to your grandma.'", "created_on": 1680864667.0, "upvotes": 20, "author_id": "7uv3rhpg", "author_name": "Xelaxander"}, "126": {"post_id": "12egsoz", "comment_id": "jfby7pk", "parent_id": "t1_jfawjdy", "body": "How appropriate. You fight like a cow!", "created_on": 1680883116.0, "upvotes": 10, "author_id": "uhs1e", "author_name": "aughlord"}, "127": {"post_id": "12egsoz", "comment_id": "jfdekwv", "parent_id": "t3_12egsoz", "body": "Good project idea. Btw, if you arnt aware by now you should look into vector databases. I like Qdrant. It will allow you to **dramatically** decrease the time it takes to find nearest neighbor embeddings and scale the project. Also, then you don't have to commit a gigantic csv.", "created_on": 1680904404.0, "upvotes": 10, "author_id": "zie7k", "author_name": "pawsibility"}, "128": {"post_id": "12egsoz", "comment_id": "jfdhocw", "parent_id": "t1_jfdekwv", "body": "Definitely looking into this. Majority of the time it takes actually goes to extracting the facial embeddings of the user from the image and it only takes a fraction of the time to traverse the csv.", "created_on": 1680905748.0, "upvotes": 6, "author_id": "rs4dqilj", "author_name": "2broke2code"}, "129": {"post_id": "12egsoz", "comment_id": "jfcvugk", "parent_id": "t3_12egsoz", "body": "I love the idea that you used a subreddit as a training dataset", "created_on": 1680896539.0, "upvotes": 16, "author_id": "crpi7efu", "author_name": "_ologies"}, "130": {"post_id": "12egsoz", "comment_id": "jfcw635", "parent_id": "t1_jfcvugk", "body": "The subreddit is huge and I only scrapped like <10% of it tbh", "created_on": 1680896673.0, "upvotes": 9, "author_id": "rs4dqilj", "author_name": "2broke2code"}, "131": {"post_id": "12egsoz", "comment_id": "jfc7270", "parent_id": "t3_12egsoz", "body": "One thing that annoyed me a bit was the waiting message \"almost done\". This took a bit of time for me and seeing the \"almost done\" message pop up again and again didn't reassure me that the process was actually \"almost done\".", "created_on": 1680886575.0, "upvotes": 18, "author_id": "jzofmhqk", "author_name": "DangerDinks"}, "132": {"post_id": "12egsoz", "comment_id": "jfc7r41", "parent_id": "t1_jfc7270", "body": "Yeah I'm on your side there. It's just a loop for now since there isn't a way for me to communicate with the backend asynchronously without complicating things in my Ajax request. (Gonna brush it off to me being a noob).\n\nI'll look into this now that you've mentioned it.", "created_on": 1680886840.0, "upvotes": 12, "author_id": "rs4dqilj", "author_name": "2broke2code"}, "133": {"post_id": "12egsoz", "comment_id": "jfcvsyu", "parent_id": "t3_12egsoz", "body": "Given that you have a .gitignore, is there a reason you committed your __pycache__?", "created_on": 1680896522.0, "upvotes": 27, "author_id": "crpi7efu", "author_name": "_ologies"}, "134": {"post_id": "12egsoz", "comment_id": "jfcvxgl", "parent_id": "t1_jfcvsyu", "body": "Noob move. It's full of bugs too ngl.", "created_on": 1680896574.0, "upvotes": 27, "author_id": "rs4dqilj", "author_name": "2broke2code"}, "135": {"post_id": "12egsoz", "comment_id": "jfcf3ip", "parent_id": "t3_12egsoz", "body": "I think we killed it.", "created_on": 1680889731.0, "upvotes": 29, "author_id": "u1ac", "author_name": "Smallpaul"}, "136": {"post_id": "12egsoz", "comment_id": "jfcv9ci", "parent_id": "t1_jfcf3ip", "body": "It's barely holding out...", "created_on": 1680896295.0, "upvotes": 13, "author_id": "rs4dqilj", "author_name": "2broke2code"}, "137": {"post_id": "12egsoz", "comment_id": "jfbqotg", "parent_id": "t3_12egsoz", "body": "I am honestly insanely impressed, it has more variety than the actual roastme subreddit. Actual roastme only has two basic responses. If a woman \"you have daddy issues and you have lots of sex because of it.\" If a man \"You are not attractive and you do not have sex because of it\".", "created_on": 1680880128.0, "upvotes": 85, "author_id": "5whack6k", "author_name": "RubberOmnissiah"}, "138": {"post_id": "12egsoz", "comment_id": "jfdavl9", "parent_id": "t1_jfbqotg", "body": "AI replacing human roasters became a reality.", "created_on": 1680902814.0, "upvotes": 1, "author_id": "bz5bd6ry", "author_name": "QultrosSanhattan"}, "139": {"post_id": "12egsoz", "comment_id": "jfcsv6q", "parent_id": "t1_jfbqotg", "body": "What happens if you're non-binary?  \"Your dad is ugly and you have the perfect amount of sex?\"", "created_on": 1680895312.0, "upvotes": 15, "author_id": "5u8r6929", "author_name": "SnooKiwis7862"}, "140": {"post_id": "12egsoz", "comment_id": "jfcgffr", "parent_id": "t1_jfbqotg", "body": "Wait you got it to recognise images?", "created_on": 1680890255.0, "upvotes": 15, "author_id": "5e99kkv7", "author_name": "truerandom_Dude"}, "141": {"post_id": "12egsoz", "comment_id": "jfc1x10", "parent_id": "t1_jfbqotg", "body": "That is so true. Thanks a lot for the support fam. It took a lotta training.", "created_on": 1680884578.0, "upvotes": 26, "author_id": "rs4dqilj", "author_name": "2broke2code"}, "142": {"post_id": "12egsoz", "comment_id": "jfb3xh6", "parent_id": "t3_12egsoz", "body": "Cool project. Nicely done!\nA small suggestion - don\u2019t leave blank except statements - it is not considered a good practice for a number of reasons.", "created_on": 1680869505.0, "upvotes": 216, "author_id": "d4yq7", "author_name": "iVend3ta"}, "143": {"post_id": "12egsoz", "comment_id": "jffvmnt", "parent_id": "t1_jfb3xh6", "body": "What do mean by blank except statements? What would be the proper way to do it?", "created_on": 1680959414.0, "upvotes": 1, "author_id": "n3wts", "author_name": "MrMxylptlyk"}, "144": {"post_id": "12egsoz", "comment_id": "jfb49g9", "parent_id": "t1_jfb3xh6", "body": "Thank you for the feedback. May I ask how you were able to tell there were blank except statements? (Did you see it in the frontend by chance?)", "created_on": 1680869702.0, "upvotes": 30, "author_id": "rs4dqilj", "author_name": "2broke2code"}, "145": {"post_id": "12egsoz", "comment_id": "jfbw37w", "parent_id": "t1_jfb3xh6", "body": "This guy is a dev responsible for other devs.", "created_on": 1680882289.0, "upvotes": 164, "author_id": "9hmoru2", "author_name": "Dasshteek"}, "146": {"post_id": "12ffsif", "comment_id": "jfs3lng", "parent_id": "t3_12ffsif", "body": "Predictions\n\n1) soon people will realize that concurrent programming is hard, in particular when you want to share state. \n\n2) the Pythonic way of concurrency will remain non-shared state parallelism, which is the same as multiprocessing, whatever yoi csll it.\n\n3) you can't eat the GIL. What I mean is having multiple locks to coordinate makes things more difficult, not less.\n\n4) The Python core team keeps acting against the interest of the language. We'll need a new BDFL.", "created_on": 1681180516.0, "upvotes": 1, "author_id": "77znkc6x", "author_name": "Grouchy-Friend4235"}, "147": {"post_id": "12ffsif", "comment_id": "jfix6cm", "parent_id": "t3_12ffsif", "body": "I believe this should significantly increase the performance of webframeworks that utilise multi workers ? Like gunicorn and unicorn to say the least? \n\nIf that's so , I am hoping this can actually make python a pretty good and efficient player in terms of building webservices?", "created_on": 1681008398.0, "upvotes": 0, "author_id": "1fhi5drl", "author_name": "kawaiibeans101"}, "148": {"post_id": "12ffsif", "comment_id": "jfs2mr0", "parent_id": "t1_jfix6cm", "body": "It already is.\n\nAlso this is not a magic pill. It solves aesthetics more than it solves an actual problem.", "created_on": 1681180055.0, "upvotes": 2, "author_id": "77znkc6x", "author_name": "Grouchy-Friend4235"}, "149": {"post_id": "12ffsif", "comment_id": "jffdkfr", "parent_id": "t3_12ffsif", "body": "Remember _perl 6_?", "created_on": 1680946910.0, "upvotes": -7, "author_id": "1t8cx39u", "author_name": "gladiatr72"}, "150": {"post_id": "12ffsif", "comment_id": "jfh5s47", "parent_id": "t1_jffdkfr", "body": "This change doesn't affect pure Python code and is opt-in for C extensions...", "created_on": 1680979130.0, "upvotes": 5, "author_id": "ajq6m", "author_name": "zurtex"}, "151": {"post_id": "12ffsif", "comment_id": "jffg6u9", "parent_id": "t1_jffdkfr", "body": "I don't understand...", "created_on": 1680949224.0, "upvotes": 22, "author_id": "afynq0tv", "author_name": "Helpful_Arachnid8966"}, "152": {"post_id": "12ffsif", "comment_id": "jfgqc92", "parent_id": "t3_12ffsif", "body": "So does this take python a step in the direction of concurrency? running multiple processes in parallel?", "created_on": 1680972851.0, "upvotes": 3, "author_id": "8wlcbbhb", "author_name": "Nfl_Notabot"}, "153": {"post_id": "12ffsif", "comment_id": "jfh5h7b", "parent_id": "t1_jfgqc92", "body": "Python is already capable of concurrency.  Concurrent doesn't necessarily mean parallel. It is also capable of multi-processing in parallel.  The limitation imposed by the GIL is that only one thread can be executed at a time.", "created_on": 1680978999.0, "upvotes": 8, "author_id": "6ttpm", "author_name": "crankerson"}, "154": {"post_id": "12ffsif", "comment_id": "jfgppv9", "parent_id": "t3_12ffsif", "body": "Should we rename it to the IL now?", "created_on": 1680972600.0, "upvotes": 3, "author_id": "3z25x", "author_name": "javajunkie314"}, "155": {"post_id": "12ffsif", "comment_id": "jfh51so", "parent_id": "t1_jfgppv9", "body": "People have used the name \"Local Interpreter Lock\"", "created_on": 1680978826.0, "upvotes": 4, "author_id": "ajq6m", "author_name": "zurtex"}, "156": {"post_id": "12ffsif", "comment_id": "jffbjpu", "parent_id": "t3_12ffsif", "body": "Finally... after decades!!!", "created_on": 1680945091.0, "upvotes": 3, "author_id": "6clby1yj", "author_name": "AnonymouX47"}, "157": {"post_id": "12ffsif", "comment_id": "jfg357l", "parent_id": "t3_12ffsif", "body": "I'm worried that this might pause the move to remove the gil entirely. I was hoping 3.12 or at least 3.13 wouldn't have a gil", "created_on": 1680963128.0, "upvotes": 8, "author_id": "44f90", "author_name": "jyper"}, "158": {"post_id": "12ffsif", "comment_id": "jfhogkr", "parent_id": "t1_jfg357l", "body": "I'm pretty sure the GIL is something that is staying for the life of Python 3. I also think it's one of the only changes big enough to warrant a Python 4.", "created_on": 1680987165.0, "upvotes": 1, "author_id": "uc1l344z", "author_name": "1668553684"}, "159": {"post_id": "12ffsif", "comment_id": "jfjnqw6", "parent_id": "t1_jfg357l", "body": "Removing the GIL is undesirable anyway, and a total red herring from the actual problem the actual issues that people actually have with multithreading. So that's actually a good thing.", "created_on": 1681025291.0, "upvotes": 0, "author_id": "cghx1", "author_name": "lieryan"}, "160": {"post_id": "12ffsif", "comment_id": "jfg6ipp", "parent_id": "t1_jfg357l", "body": "No Gil is never going to come to Python 3 ever. \n\nIt AT BEST would come in Python 4. It\u2019s a dramatically breaking change. And would cause a major disruption in the language.", "created_on": 1680964614.0, "upvotes": 12, "author_id": "13o7qq", "author_name": "turtle4499"}, "161": {"post_id": "12ffsif", "comment_id": "jfgkhdx", "parent_id": "t1_jfg357l", "body": "It was never going to land in 3.12, it is way too big a change in terms of impact on the ecosystem. The per interpreter gil work has been going on since 2014 as per the pep. I expect a similar timeframe for the nogil work.\n\nHowever, the per gil work had to address some serious technical debt in cpython like widespread usage of global variables that will simplify any future work on parallelism, including nogil.", "created_on": 1680970427.0, "upvotes": 16, "author_id": "bfc17", "author_name": "rouille"}, "162": {"post_id": "12ffsif", "comment_id": "jfh0rs3", "parent_id": "t3_12ffsif", "body": "So we can do actors and goroutines now, right? Right?", "created_on": 1680977183.0, "upvotes": 4, "author_id": "13oxcl", "author_name": "ambidextrousalpaca"}, "163": {"post_id": "12ffsif", "comment_id": "jfhkg4g", "parent_id": "t1_jfh0rs3", "body": "You can already do that with asyncio. I guess you mean with parallelism?\n\nWould be interesting to do something like aiomultiprocess with multiple interpreters.", "created_on": 1680985395.0, "upvotes": 7, "author_id": "bfc17", "author_name": "rouille"}, "164": {"post_id": "12ffsif", "comment_id": "jffmz3j", "parent_id": "t3_12ffsif", "body": "We\u2019ve always had a per interpreter GIL. maybe just a bad headline here?\n\nEdit. Decided to RFTA. This is talking about multiple interpreters in the same process which they say \u201c The C-API for multiple interpreters has been used for many years. However, until relatively recently the feature wasn\u2019t widely known, nor extensively used (with the exception of mod_wsgi).\u201d\n\nSo maybe a good idea and more things can start using it.", "created_on": 1680954358.0, "upvotes": 65, "author_id": "ze0qhs2", "author_name": "ConfidentFlorida"}, "165": {"post_id": "12ffsif", "comment_id": "jffqf4s", "parent_id": "t1_jffmz3j", "body": "Does this mean we could have some sort of userland shared memory between interpreters ? That would simplify a lot of stuff", "created_on": 1680956489.0, "upvotes": 10, "author_id": "a73hg", "author_name": "staticcast"}, "166": {"post_id": "12ffsif", "comment_id": "jfg8hgz", "parent_id": "t1_jffmz3j", "body": "I believe not, what I understand is that there were always sub-interpreters inside C-api, but they share the same GIL with the Main interpreter.\nThe way to work with multiple cores in Python now (3.11) is by using multiprocessing, which opens a new python interpreter (new process no new thread). With PEP 684, the use of multiple cores will be possible with one interpreter.", "created_on": 1680965448.0, "upvotes": 40, "author_id": "6c6jytyj", "author_name": "patch-jh"}, "167": {"post_id": "12ffsif", "comment_id": "jffztus", "parent_id": "t3_12ffsif", "body": "I don't quite understand how multiple interpreters in one process is different from other flavors of parallelism. It's essentially how I used to think of threads, but I guess I was oversimplifying?\n\nWith the interpreters more isolated, and global state duplicated to each, how is this different, in effect, from multi-process parallelism?", "created_on": 1680961550.0, "upvotes": 15, "author_id": "9k3f3", "author_name": "FrickinLazerBeams"}, "168": {"post_id": "12ffsif", "comment_id": "jfs1jix", "parent_id": "t1_jffztus", "body": "It isn't but it takes a CS degree to appreciate that.", "created_on": 1681179535.0, "upvotes": 0, "author_id": "77znkc6x", "author_name": "Grouchy-Friend4235"}, "169": {"post_id": "12ffsif", "comment_id": "jfg3v16", "parent_id": "t1_jffztus", "body": "1. on Windows (which unfortunately a lot of people use), processes (and threads for that matter) are really expensive\n2. with multiple interpreters in one process, you only need C code to *share objects* between interpreters.\n    * with a single interpreter, you need to write your *entire algorithm* in C to take advantage of parellelism\n    * with multiple processes, allocating shared memory is really expensive and most synchronization APIs are not available and/or are very slow, and it's not always predictable what might need to be shared. With threads it's all in one address space.", "created_on": 1680963458.0, "upvotes": 5, "author_id": "fjay8", "author_name": "o11c"}, "170": {"post_id": "12ffsif", "comment_id": "jfhdttj", "parent_id": "t1_jffztus", "body": "I see the main advantage for mixed C(++)/Python projects.\nC++ code can be thread-safe (if using mutexes), so it can be used to share state across the interpreters.\nPreviously, doing the same thing across processes was massively more complicated -- all shared data needed to be allocated in shared memory sections, which means simple C++ types like `std::string` couldn't be used. Also the normal C++ `std::mutex` can't synchronize across different processes.\n\nSo effectively, if you had an existing thread-safe C++ library and wanted to use it concurrently from multiple Python threads, you were forced to choose between:\n\n1) run everything in one process, with the GIL massively limiting the possible concurrency\n\n2) Use multiprocessing run a separate copy of the C++ library in each process. This multiplies our memory consumption (for us, that's often ~15GB) with the number of cores (so keeping a modern CPU busy would take 480GB of RAM)\n\n3) Essentially re-write the C++ library to use custom allocators and custom locks everywhere, so that it can place the 15 GB data in shared memory.\n\nNow with Python 3.12 with GIL-per-subinterpreter, I think we'll finally be able to use all CPU cores concurrently without massively increasing our memory usage or C++ code complexity.", "created_on": 1680982448.0, "upvotes": 3, "author_id": "a98vj", "author_name": "kniy"}, "171": {"post_id": "12ffsif", "comment_id": "jfg3g0f", "parent_id": "t1_jffztus", "body": "At the operating system level there is extra overhead for sending data between processes, for locking between processes and for task switching into different processes.\n\nIn my experience, threads are more consistent across operating systems. There are three different multiprocess spawn methods which have varying support across platforms.\n\nI also think there might some day be a way for the interpreters to intelligently share immutable data.", "created_on": 1680963266.0, "upvotes": 17, "author_id": "u1ac", "author_name": "Smallpaul"}, "172": {"post_id": "12ffsif", "comment_id": "jfgw825", "parent_id": "t3_12ffsif", "body": "Great!  This is a step towards the threading model that Perl introduced experimentally in 5.6.0 (2000) and [supported in 5.8.0](https://perldoc.perl.org/threads#DESCRIPTION) (2002).  Since switching to Python \\~7 years ago, I have wondered why Python did not have a similar threading model.\n\nThe highlights of perl threading are:\n\n* One interpreter per thread\n* No user objects are shared by default\n* ... but you can mark *specific* user objects as \"shared\" which makes them accessible between threads\n\nSeems like the next big missing piece for Python having a useful threading model is that third bullet.", "created_on": 1680975287.0, "upvotes": 37, "author_id": "yfwwj", "author_name": "ReverseBrindle"}, "173": {"post_id": "12ffsif", "comment_id": "jfiwe84", "parent_id": "t1_jfgw825", "body": "How is this any different than multiprocessing?", "created_on": 1681008008.0, "upvotes": 2, "author_id": "4t2z146k", "author_name": "kkirchhoff"}, "174": {"post_id": "12ffsif", "comment_id": "jfh5h1m", "parent_id": "t1_jfgw825", "body": "> ... but you can mark specific user objects as \"shared\" which makes them accessible between threads\n\nI don't believe there is any support for this yet, and there would probably need to be some sort of API to be able to mark something as safe to do this with.", "created_on": 1680978997.0, "upvotes": 4, "author_id": "ajq6m", "author_name": "zurtex"}, "175": {"post_id": "12ffsif", "comment_id": "jff8ky3", "parent_id": "t3_12ffsif", "body": "A [link to the pep itself](https://peps.python.org/pep-0684/) (which hasn't been updated to accept status yet). Very cool news, can't wait to see what the future entails!\n\n....and I dropped a P in the title. \ud83e\udd26\ud83c\udffb\u200d\u2642\ufe0f", "created_on": 1680942448.0, "upvotes": 106, "author_id": "3gad9", "author_name": "midnitte"}, "176": {"post_id": "12ffsif", "comment_id": "jfhpqw8", "parent_id": "t1_jff8ky3", "body": "Environmental puzzles in my python?", "created_on": 1680987729.0, "upvotes": 1, "author_id": "6wm08u8", "author_name": "huantian"}, "177": {"post_id": "12ffsif", "comment_id": "jfg2why", "parent_id": "t1_jff8ky3", "body": "This is the python community. You are supposed to ADD a P to everything.", "created_on": 1680963017.0, "upvotes": 19, "author_id": "u1ac", "author_name": "Smallpaul"}, "178": {"post_id": "12ffsif", "comment_id": "jffotfn", "parent_id": "t1_jff8ky3", "body": ">....and I dropped a P in the title. \ud83e\udd26\ud83c\udffb\u200d\u2642\ufe0f\n\nIt's amazing how many times I re-read the title before I found the missing P", "created_on": 1680955531.0, "upvotes": 52, "author_id": "2keby", "author_name": "IlliterateJedi"}, "179": {"post_id": "12fzdu2", "comment_id": "jfjvrv0", "parent_id": "t3_12fzdu2", "body": "Just to let you know, geddit is a linux utility already (text editor), so you might want to change the repo name. Also should probably do a search before naming your repos lol.\n\nCool project", "created_on": 1681032152.0, "upvotes": 1, "author_id": "oo092", "author_name": "FruscianteDebutante"}, "180": {"post_id": "12fzdu2", "comment_id": "jfk17kw", "parent_id": "t1_jfjvrv0", "body": ">geddit is a linux utility already (text editor)\n\nThe text editor is actually [gedit](https://wiki.gnome.org/Apps/Gedit) not geddit, but close enough.", "created_on": 1681036939.0, "upvotes": 11, "author_id": "13kp2p", "author_name": "ThroawayPartyer"}, "181": {"post_id": "12fzdu2", "comment_id": "jfixj9o", "parent_id": "t3_12fzdu2", "body": "I once commented on a post a year ago. And now I can't find it.bcs of how deep it is in. Are you gonna add that \"and comment\" back? It seems great by the way.", "created_on": 1681008580.0, "upvotes": 3, "author_id": "f0ljqj2j", "author_name": "Anonymo2786"}, "182": {"post_id": "12fzdu2", "comment_id": "jfjj0fx", "parent_id": "t3_12fzdu2", "body": "Oh gods, that title made me think that my saved posts were public. So glad my weird mix of engineering and smut isn\u2019t visible :|", "created_on": 1681021572.0, "upvotes": 10, "author_id": "4bsjwtj", "author_name": "grokkingStuff"}, "183": {"post_id": "12fzdu2", "comment_id": "jfjvvav", "parent_id": "t1_jfjj0fx", "body": "Why do yall not compartmentalize that? How could you even scroll on your main account with that shit lmao", "created_on": 1681032234.0, "upvotes": 8, "author_id": "oo092", "author_name": "FruscianteDebutante"}, "184": {"post_id": "12fzdu2", "comment_id": "jfj9mnw", "parent_id": "t3_12fzdu2", "body": "i just learnt recently we can only access the last 1000 saved post on Reddit.\n\n\nhttps://news.ycombinator.com/item?id=17647915", "created_on": 1681015301.0, "upvotes": 26, "author_id": "banwy", "author_name": "saintshing"}, "185": {"post_id": "12fzdu2", "comment_id": "jfkvlgq", "parent_id": "t1_jfj9mnw", "body": "Rough.", "created_on": 1681053902.0, "upvotes": 1, "author_id": "4pkm1", "author_name": "Incruentus"}, "186": {"post_id": "12fzdu2", "comment_id": "jflgkks", "parent_id": "t1_jfj9mnw", "body": "The GitHub page actually specifically says it can save over 1000 items...maybe there is a workaround?", "created_on": 1681062540.0, "upvotes": 2, "author_id": "3tpqo", "author_name": "mgrandi"}, "187": {"post_id": "12fzdu2", "comment_id": "jfipzm8", "parent_id": "t3_12fzdu2", "body": "*saves post*", "created_on": 1681004742.0, "upvotes": 94, "author_id": "fj93m", "author_name": "cryptoplasm"}, "188": {"post_id": "12fzdu2", "comment_id": "jfj1drj", "parent_id": "t1_jfipzm8", "body": "[removed]", "created_on": 1681010609.0, "upvotes": 9, "author_id": "deleted", "author_name": "deleted"}, "189": {"post_id": "12f3glm", "comment_id": "jfjelpc", "parent_id": "t3_12f3glm", "body": "I am neutral on this.\n\n1. It will probably help with things like Codon which are aiming to increase speed 10x+ instead of 10%\n\n2. It will help with companies that have relatively large codebases, and once you get to a million lines or so, manageability without types is a pain.\n\n3. It will make reading code for true beginners harder. Also, all the people using chatGPT for code cleaning are going to feel left out.", "created_on": 1681018394.0, "upvotes": 1, "author_id": "o4ucl8iz", "author_name": "julysanta"}, "190": {"post_id": "12f3glm", "comment_id": "jfhz2tw", "parent_id": "t3_12f3glm", "body": "I never understood the use of generics until using Go, which has a very similar syntax to this", "created_on": 1680991920.0, "upvotes": 1, "author_id": "5kele", "author_name": "Rebeljah"}, "191": {"post_id": "12f3glm", "comment_id": "jfh48s6", "parent_id": "t3_12f3glm", "body": "Oh this is awesome", "created_on": 1680978501.0, "upvotes": 1, "author_id": "567uwsyz", "author_name": "someotherstufforhmm"}, "192": {"post_id": "12f3glm", "comment_id": "jfgbyse", "parent_id": "t3_12f3glm", "body": "I never never really understood the typing backporting - say that this is implemented in python 3.12, can it be used in earlier version with something like `from __future__ import annotations`?", "created_on": 1680966949.0, "upvotes": 1, "author_id": "s9gvb4bm", "author_name": "Thing1_Thing2_Thing"}, "193": {"post_id": "12f3glm", "comment_id": "jfgn317", "parent_id": "t1_jfgbyse", "body": "New syntax can not be used at runtime on an older version. The new generic syntax is not inside the annotation so will not be back ported. Often new typing features don\u2019t involve syntax changes making back porting possible. This pep you will mostly need to wait for 3.12 to use.", "created_on": 1680971515.0, "upvotes": 3, "author_id": "nemgl", "author_name": "Mehdi2277"}, "194": {"post_id": "12f3glm", "comment_id": "jfg8kqk", "parent_id": "t3_12f3glm", "body": "Ooh, I like!", "created_on": 1680965489.0, "upvotes": 1, "author_id": "11kgfj", "author_name": "pbecotte"}, "195": {"post_id": "12f3glm", "comment_id": "jffm8dk", "parent_id": "t3_12f3glm", "body": "Wonder when we can define types without having to import from typing", "created_on": 1680953870.0, "upvotes": 1, "author_id": "4caar", "author_name": "twigboy"}, "196": {"post_id": "12f3glm", "comment_id": "jffz3l8", "parent_id": "t1_jffm8dk", "body": "It really should never have been different syntax from declaring classes. Defining a class literally creates a new type. This direction python is going with types is bonkers.", "created_on": 1680961188.0, "upvotes": 1, "author_id": "sriybt2c", "author_name": "Ok-Maybe-2388"}, "197": {"post_id": "12f3glm", "comment_id": "jffny0j", "parent_id": "t3_12f3glm", "body": "Yes but will the file extensions end in \".typy\"?", "created_on": 1680954979.0, "upvotes": 1, "author_id": "9ljvg", "author_name": "nirvanna94"}, "198": {"post_id": "12f3glm", "comment_id": "jff9ivl", "parent_id": "t3_12f3glm", "body": "Python has been in existence for decades, it's performance is nothing to write home about, the GIL has been in the way of parallelism ever since... but all so many are worried about is declaring types in a dynamically typed language.\n\nJust the number of PEPs on typing in recent times compared to those on other topics tells a lot about the current python ecosystem.\n\nTo be sincere, this whole typing madness sickens me all the time.\n\nEDIT: PEP 684 also got accepted, but I don't see as much enthusiasm about that.", "created_on": 1680943282.0, "upvotes": 1, "author_id": "6clby1yj", "author_name": "AnonymouX47"}, "199": {"post_id": "12f3glm", "comment_id": "jffyrt5", "parent_id": "t1_jff9ivl", "body": "Yep. Why people care *so much* about types when you can so easily violate any type promises you made is baffling \n\nUntil python itself uses these type hints for performance gains (which likely implies these would be cases where there's no way for the type hints to be wrong, e.g you can't add new attributes to a class if they aren't already defined), I won't find any utility in them.", "created_on": 1680961027.0, "upvotes": 1, "author_id": "sriybt2c", "author_name": "Ok-Maybe-2388"}, "200": {"post_id": "12f3glm", "comment_id": "jffcs6k", "parent_id": "t1_jff9ivl", "body": "Guido is the one who started this with PEP 484. All this is is a continuation of work that the original author of Python believed was beneficial to the language.\n\nIt\u2019s funny you mention performance and the GIL when there has been real progress in these areas currently. 3.11 is 10-60% faster than 3.10. And Sam Gross, who successfully removed the GIL in a fork of 3.9 with no significant loss of speed, recently authored PEP 703 which proposes the ability to build CPython 3.12 without the GIL.", "created_on": 1680946207.0, "upvotes": 5, "author_id": "7is2d", "author_name": "fiddle_n"}, "201": {"post_id": "12f3glm", "comment_id": "jffqx6f", "parent_id": "t1_jff9ivl", "body": "> Just the number of PEPs on typing in recent times compared to those on other topics tells a lot about the current python ecosystem.\n\nYeah, a huge amount of effort has gone into Typed Python - a quick count shows 28 accepted PEPs relating to typing, a total of 93,000 words. That's twice as long as the reference manual for the entirety of [Lua](https://lua.org/manual/5.4/) and two-and-a-half times as long as the spec for [Golang](https://golang.org/ref/spec).\n\nAnd what do we have to show for it? The type system isn't great compared to Type[d Java]Script, and of course it brings none of the advantages (e.g. performance, AOT compilation) of a proper statically-typed language.", "created_on": 1680956796.0, "upvotes": 4, "author_id": "cesqn", "author_name": "bakery2k"}, "202": {"post_id": "12f3glm", "comment_id": "jfekdpf", "parent_id": "t3_12f3glm", "body": "Nice! \n\nNow fix `Callable` with pep 677 (or something like it).", "created_on": 1680924732.0, "upvotes": 2, "author_id": "akqf8", "author_name": "nebbly"}, "203": {"post_id": "12f3glm", "comment_id": "jfeb519", "parent_id": "t3_12f3glm", "body": "Nice! Now they need to accept the new syntax for Callable's :s", "created_on": 1680919817.0, "upvotes": 4, "author_id": "1ihi9dzo", "author_name": "ianliu88"}, "204": {"post_id": "12f3glm", "comment_id": "jfes1jp", "parent_id": "t3_12f3glm", "body": "Given the enthusiastic tone of the comments, I am going with a potentially controversial comment but I am not trying to gaslight, I'm sincerely interested in learning more about this.\n\nI get the point of the PEP but I am genuine concerned about the overall trend of the typing. To me, it adds mostly syntactic sugar (it is as strictly required as a docstring, at least for now) at the cost of reducing considerably readability and conciseness, both of which are staples of Python and always cited among the reasons of its success.\n\nIf typing is really that useful, then why roleplaying typed languages instead of going all the way through?\n\nOne potential advantage I see is that typing can be a way to embed some sort of online testing in the code that even a linter might do. However, it can't replace actual testing, so... A glorified guideline?\n\nI am trying to use it in my daily coding yet here I am, questioning its very existence.\n\nFeel free to bash me, but while doing so please throw in as much information as possible", "created_on": 1680929378.0, "upvotes": 17, "author_id": "24q6v1b1", "author_name": "catorchid"}, "205": {"post_id": "12f3glm", "comment_id": "jfhwoav", "parent_id": "t1_jfes1jp", "body": "From just the contents of your comment, it sounds like you've never used a type checker/validator?\n\nHow would your perspective change knowing that every commit or pull request, you must pass type validation?", "created_on": 1680990821.0, "upvotes": 1, "author_id": "j08pz", "author_name": "diamondketo"}, "206": {"post_id": "12f3glm", "comment_id": "jfezwj5", "parent_id": "t1_jfes1jp", "body": "When I started learning python, one of the main selling points was its brutal, unparalleled simplicity. There was no need to declare variables or their types. If it quacks like a duck and walks like a duck, they it\u2019s probably a duck and treat it like a duck. I am 100% with you. I don\u2019t understand this typing furor. It feels unaligned with python\u2019s core design principles.", "created_on": 1680935156.0, "upvotes": 3, "author_id": "rl7lahl", "author_name": "jabellcu"}, "207": {"post_id": "12f3glm", "comment_id": "jffca83", "parent_id": "t1_jfes1jp", "body": "A long time ago we had the concept of literate programming. Python types are a good example of this, they lead to self-documenting code, with the bonus that they are formalised enough to help linters and editors give feedback to the coder. You hint at that in your comment. It is only a potential advantage to you because you are not using it. To me, it is real advantage. \n\nI taught myself oCaml a while back to get the hang of a functional language. The functional aspect of it was a bit hohum ... lots of recursion to avoid state, and then trust in the compiler to render the recursion as iterative code. But algebraic typing was just amazing. Python will never really be very good at typing, but what we're getting a big help if you try it.", "created_on": 1680945756.0, "upvotes": 2, "author_id": "e6szh", "author_name": "timrichardson"}, "208": {"post_id": "12f3glm", "comment_id": "jffc6ht", "parent_id": "t1_jfes1jp", "body": "What is your current background and for what purpose do you use Python? The answer to that determines whether you are a group that would benefit from the type hinting feature, or somebody who doesn\u2019t really need it.", "created_on": 1680945665.0, "upvotes": 2, "author_id": "7is2d", "author_name": "fiddle_n"}, "209": {"post_id": "12f3glm", "comment_id": "jfgbn3m", "parent_id": "t1_jfes1jp", "body": "Since it was not built into the language from day 1 adding it would be a compatibility break. Additionally, forcing it hurts python as a scripting language, I for one don\u2019t need types on a 60 line ETL with pandas. \n\nI used to be a maintainer for a 200 kloc python codebase. It was well over a decade old and developed by dozens of people across about a dozen companies. A project of that scale needs to very explicitly declare interfaces otherwise it becomes nearly impossible to reason about the codebase. Specifically, having well specified return types means that forgetting to handle None-returns is not an issue anymore. \n\nThe overhead of reading generic syntax, like \u201cthis function takes an iterator of T and a function that takes T and returns U, returning an iterator of U\u201d, is nothing compared to trying to figure that out from reading the function or explaining it in a doc comment. The first few times you see it it does take a bit longer, but that goes away. \n\nPython will likely never have a strong enough type system to replace all testing. However, it can replace some testing when combined with mypy. If your types are well specified, you can throw out all the tests around \u201cDoes this function do the right thing if I give it the wrong types?\u201d, \u201cDoes this function handle None?\u201d, etc. If you start to use prototypes and generic constraints, you can use mypy to check that you are composing correctly. \n\nThe big advantages is for IDEs and tooling. The TypeVar approach is a nightmare for tools to handle. Being able to get \u201cthis function takes T and U and returns T\u201d from the signature should help speed up things quite a bit. \n\nIn the future, I could see mypy being integrated into python and allowing an opt-in \u201cstrict typing\u201d mode which increases startup time but allows python to generate better machine code or just automatically create the guard code for incorrect types for you. Alternatively, this would open up ahead of time compilation, which might enable you to figure out everything in interpreted mode then compile for production.", "created_on": 1680966808.0, "upvotes": 4, "author_id": "2uuylk7f", "author_name": "lightmatter501"}, "210": {"post_id": "12f3glm", "comment_id": "jfexckg", "parent_id": "t1_jfes1jp", "body": "The core answer for me is if I could replace python with statically typed similarish language with same library ecosystem I likely would. Python is used by many groups for variety of reasons. I work on large production numerical/ml libraries in python. Python dominates ml ecosystem and most other languages are worth little consideration for products that use deep learning. At same time typing is still very useful as both form of documentation and for making refactors/changes in large codebases safer.\n\nAs for your linter point I value linters strongly. My current codebase requires code to lint check, pass documentation rules, pass type checker, and test coverage rules. Type checking does not replace testing. I consider it to be stronger then typical linter and both linters/type checkers I find very valuable in refactors and following larger codebases \n\nI think this feature does make following generics a good deal more straight forward. The current way of doing it makes generic methods of class very ambiguous and easy to confuse generic function in a class vs generic class\u2019s function which look almost same but mean two different things. Python is also rather weird in that almost no other language with generic has comparable syntax today. I\u2019ve coded in bunch of languages to some degree and can\u2019t think of any language with similar way of doing generics as python for defining type variables. I think for developers that write generic functions new syntax will be more friendly to use and follow.\n\nLastly I would not consider conciseness a goal of python. The new syntax is more concise then existing way of defining TypeVar for 1 function but even if it mildly longer that would not be main consideration for me. There are parts of python that look like pseudo code but there are many ways it does not optimize for conciseness like custom operators. Haskell is much more concise and dense language used by a couple companies. J is even more extreme concision language but I\u2019d consider J to be pretty difficult to read and very special case.", "created_on": 1680933163.0, "upvotes": 24, "author_id": "nemgl", "author_name": "Mehdi2277"}, "211": {"post_id": "12f3glm", "comment_id": "jffm9dh", "parent_id": "t3_12f3glm", "body": "I like the syntax for generics, full stop.\n\nI wish the context specific `type` keyword was a separate PEP. Because i require it so infrequently by comparison that I\u2019m less certain it needs special syntax at all. But also because it feels like something like`T: list | dict` would have been simpler?", "created_on": 1680953889.0, "upvotes": 3, "author_id": "aj1ll", "author_name": "DanCardin"}, "212": {"post_id": "12f3glm", "comment_id": "jfjoa0v", "parent_id": "t1_jffm9dh", "body": "I think you can use the type alias in active code like \\`isinstance\\`\u2014it's not just for the type checker?  Someone please correct me if I'm wrong.", "created_on": 1681025735.0, "upvotes": 1, "author_id": "k2gjg", "author_name": "energybased"}, "213": {"post_id": "12f3glm", "comment_id": "jfefaz0", "parent_id": "t3_12f3glm", "body": "I'm not sure how I feel about this. Its an improvement, for sure, but I'd prefer that type variables be (queue the horror) implicitly declared somewhere within the round braces, as opposed to in the square braces preceding the rest of the definition.\n\nI suppose its a step in the right direction, though :)", "created_on": 1680921970.0, "upvotes": 9, "author_id": "v9sl3tl7", "author_name": "InspectionCorrect242"}, "214": {"post_id": "12f3glm", "comment_id": "jfehxth", "parent_id": "t1_jfefaz0", "body": "I totally share your sentiment. \n\n```def func[T](a: T, b: T) -> T``` \n\nand\n\n```class ClassA[T: str](BaseClass):```\n\nwill definitely take a while to get use to!\n\nEdit: I don't understand why they did not chose ```< >``` for this purpose. AFAIK ```<``` and ```>``` are the only \"enclosing\" characters that still not used in python (other than as a convention for the ```__repr__``` of... types!).", "created_on": 1680923375.0, "upvotes": 9, "author_id": "4auyx", "author_name": "jimtk"}, "215": {"post_id": "12f3glm", "comment_id": "jfe7oim", "parent_id": "t3_12f3glm", "body": "This is absolutely fantastic, I already love writing Generic Code and this is going to simplify things a lot.", "created_on": 1680918078.0, "upvotes": 8, "author_id": "v12atn7h", "author_name": "Dazzling-Reason-5140"}, "216": {"post_id": "12f3glm", "comment_id": "jfe1p01", "parent_id": "t3_12f3glm", "body": "This is a great step forward! Nice work everyone involved.", "created_on": 1680915127.0, "upvotes": 24, "author_id": "3rprs", "author_name": "r1chardj0n3s"}, "217": {"post_id": "12f3glm", "comment_id": "jfecvou", "parent_id": "t3_12f3glm", "body": "This looks great to me, because despite loving typed code I.... do not understand generics and TypeVar. At all. I have no clue what they're for, haven't needed them yet that I can tell, and feel really dumb for not getting it. But I just don't get what they are for and every explanation has for some reason not clicked for me yet.", "created_on": 1680920704.0, "upvotes": 48, "author_id": "pp64t", "author_name": "oramirite"}, "218": {"post_id": "12f3glm", "comment_id": "jff4n4k", "parent_id": "t1_jfecvou", "body": "Answer this, how would you annotate this function\n\n    def f(x):\n        \"\"\"What comes in comes out\"\"\"\n        return x\n\n\nHint, what type does this function return?", "created_on": 1680939027.0, "upvotes": 2, "author_id": "j08pz", "author_name": "diamondketo"}, "219": {"post_id": "12f3glm", "comment_id": "jfekbey", "parent_id": "t1_jfecvou", "body": "[deleted]", "created_on": 1680924697.0, "upvotes": 2, "author_id": "deleted", "author_name": "deleted"}, "220": {"post_id": "12f3glm", "comment_id": "jfeftvs", "parent_id": "t1_jfecvou", "body": "It is for documenting code that does very _generic_ things. For instance, a simple function that returns the last element of a sequence. \n\n```\nfrom typing import Sequence, TypeVar\n\nT = TypeVar (\"T\")\n\ndef last(x: Sequence[T]) -> T:\n    return x[-1]\n```\n\nUsing the generics type hinting allows you to show what it is doing with better clarity.", "created_on": 1680922242.0, "upvotes": 11, "author_id": "4c1u3", "author_name": "c_is_4_cookie"}, "221": {"post_id": "12f3glm", "comment_id": "jfeek1o", "parent_id": "t1_jfecvou", "body": "Have you never had to write a function that could accept a huge number of types in its arguments and would always return something of the same type as those arguments? Like an add function?\n\nYou could have it accept Union[int, float, str, MyClass1, List] etc, but how could you enforce that the thing that it returns is the same class as the one being thrown to it? That's what generics are for. This way, you can throw most anything to it anywhere and mypy or whatever type checker you use would know that the same type would be returned.", "created_on": 1680921579.0, "upvotes": 39, "author_id": "2nfxg", "author_name": "thatguydr"}, "222": {"post_id": "12f3glm", "comment_id": "jfedzz6", "parent_id": "t1_jfecvou", "body": "Imagine you have a function that can take argument of any type and will always return the same type. You can type both arguments and return value with Any but this semantically is not correct because argument and return value will always have the same type. This is where we'd write something like\n\n`def foo(T) -> T:`", "created_on": 1680921287.0, "upvotes": 48, "author_id": "1i5j0jl5", "author_name": "saint_geser"}, "223": {"post_id": "12f3glm", "comment_id": "jfe605a", "parent_id": "t3_12f3glm", "body": "I do think the discourse about this being too magical is a valid... But because this vaguely resembles syntax for generics in other languages and because it's not too much of a mental hurdle to figure out what is going on behind the curtain I think it's totally welcome.", "created_on": 1680917237.0, "upvotes": 64, "author_id": "l2x0e3z", "author_name": "Ezlike011011"}, "224": {"post_id": "12f3glm", "comment_id": "jfdra61", "parent_id": "t3_12f3glm", "body": "[PEP 695](https://peps.python.org/pep-0695/) has been accepted. From the Abstract:\n\n> This PEP specifies an improved syntax for specifying type parameters within a generic class, function, or type alias. It also introduces a new statement for declaring type aliases.\n\nThe [examples](https://peps.python.org/pep-0695/#summary-examples) section of the PEP is a great summary. We no longer have to declare `TypeVar`, nor do we have to specify the variance. Generic functions and classes now look much more similar to how they do in other languages, `def func[T](a: T, b: T) -> T: ...`. This is a big win for typing usability.", "created_on": 1680910117.0, "upvotes": 190, "author_id": "6rgnq", "author_name": "Flamewire"}, "225": {"post_id": "12ha6mc", "comment_id": "jfs9rf2", "parent_id": "t3_12ha6mc", "body": "Ruff is so fast and catches (and maybe fixes) so many things that despite not being perfect it is 100% amazing as a first line. \n\nIt also keeps evolving so fast. It already replaces isort 100%. \n\nI wonder if it will replace black?", "created_on": 1681183624.0, "upvotes": 1, "author_id": "woat8", "author_name": "Spleeeee"}, "226": {"post_id": "12ha6mc", "comment_id": "jfqkxfk", "parent_id": "t3_12ha6mc", "body": "pardon my language because im new to python, whats a linter?", "created_on": 1681156746.0, "upvotes": 1, "author_id": "75g8g0w2", "author_name": "James_Animation"}, "227": {"post_id": "12ha6mc", "comment_id": "jfrjez3", "parent_id": "t1_jfqkxfk", "body": "TL;DR:\n\nA linter is a tool that checks your code for mistakes and style issues. PyLint, Flake8, Black, and Blue are popular Python linters. Ruff is a new tool that can replace multiple linters (and also soon [format your code like Black/Blue](https://github.com/charliermarsh/ruff/issues/1904).\n\n\nLong form:\nA linter is a tool that analyzes your code for potential errors, bugs, and stylistic issues (like [black](https://github.com/psf/black). It checks your code against a bunch of rules someone made (like Black, that is PEP8 compliant)\n\nIn Python, there are several popular linters such as PyLint, Flake8, and Black. These linters perform various checks on your code, including syntax errors, variable names, code formatting, and code complexity.\n\n- PyLint analyzes your Python code for errors and style issues, and assigns a score based on the quality of your code.\n- Flake8 checks your code for style issues, syntax errors, and potential bugs.\n- Black and Blue are Python code formatters that automatically reformats your code \n- MyPy, while not a linter in the traditional sense, focuses specifically on type-checking and does not perform general code quality checks like PyLint or Flake8.\n\nWhat's interesting is not just Ruff's ability to outperform many of these tools, but its ability to take your pipeline of 5+ tools to do these things and use one thing (Ruff) instead.\n\nRuff is also aspiring to be a code formatter like Black/Blue with some configuration allowed. So, maybe soon, we can see another tool replaced by Ruff :) (https://github.com/charliermarsh/ruff/issues/1904)", "created_on": 1681171375.0, "upvotes": 2, "author_id": "jlklb3zi", "author_name": "monorepo"}, "228": {"post_id": "12ha6mc", "comment_id": "jfowcf0", "parent_id": "t3_12ha6mc", "body": "I tried it, it's very fast. However it totally ruined some of the imports and broke my code. So I had to revert the code and stop using it.", "created_on": 1681132032.0, "upvotes": 1, "author_id": "9mk0m", "author_name": "svenvarkel"}, "229": {"post_id": "12ha6mc", "comment_id": "jfqq8hi", "parent_id": "t1_jfowcf0", "body": "If you can reproduce that you might report it. Charlie engages heavily with community and really tackles the issues. Also, Ruff is a really fast moving project, the bug might be gone by now.", "created_on": 1681158853.0, "upvotes": 2, "author_id": "2v9jxndi", "author_name": "LordBertson"}, "230": {"post_id": "12ha6mc", "comment_id": "jfogr7w", "parent_id": "t3_12ha6mc", "body": "Yes. But that workbench though...", "created_on": 1681122107.0, "upvotes": 1, "author_id": "we1a3", "author_name": "boycey10802002"}, "231": {"post_id": "12ha6mc", "comment_id": "jfoqnle", "parent_id": "t3_12ha6mc", "body": "flake8?", "created_on": 1681128945.0, "upvotes": -6, "author_id": "15m4mc", "author_name": "corbasai"}, "232": {"post_id": "12ha6mc", "comment_id": "jfqr5w7", "parent_id": "t1_jfoqnle", "body": "If you run a linter on watch-mode, flake8 quickly becomes unbearable on any meaningful code-base. Also, to reproduce ruff's functionality I also need to run isort and unimport, which are two additional explicit dependencies, all of them depending on tons of other Python baggage, versus single Python wrapped Rust binary.", "created_on": 1681159222.0, "upvotes": 1, "author_id": "2v9jxndi", "author_name": "LordBertson"}, "233": {"post_id": "12ha6mc", "comment_id": "jfoolt9", "parent_id": "t3_12ha6mc", "body": "ruff is good, but it's not 'the pinnacle'. Also, it's good in combination with black, but they sometimes not agreed on line length limits.", "created_on": 1681127707.0, "upvotes": -2, "author_id": "ps08rdmy", "author_name": "amarao_san"}, "234": {"post_id": "12ha6mc", "comment_id": "jfqrfv4", "parent_id": "t1_jfoolt9", "body": "Perfect is the enemy of good. Ruff is not perfect, but it's the best available.", "created_on": 1681159333.0, "upvotes": 1, "author_id": "2v9jxndi", "author_name": "LordBertson"}, "235": {"post_id": "12ha6mc", "comment_id": "jfp3akn", "parent_id": "t1_jfoolt9", "body": "Is there anything left that black can do but not Ruff ? My team is currently removing black and replacing it with Ruff, so I'm wondering if something was overlooked", "created_on": 1681135337.0, "upvotes": -1, "author_id": "2rzmw", "author_name": "aikii"}, "236": {"post_id": "12ha6mc", "comment_id": "jfossz5", "parent_id": "t1_jfoolt9", "body": "You can configure them to follow the same style. It's like a one line config update.", "created_on": 1681130167.0, "upvotes": 10, "author_id": "9ioqj", "author_name": "jah_broni"}, "237": {"post_id": "12ha6mc", "comment_id": "jfoyvfi", "parent_id": "t3_12ha6mc", "body": "I really don't get this issue. Does the 'speed' have to do with huge projects that I just don't work with? What can this do that Pylance doesn't?", "created_on": 1681133285.0, "upvotes": 3, "author_id": "4g505", "author_name": "max1c"}, "238": {"post_id": "12ha6mc", "comment_id": "jfqskns", "parent_id": "t1_jfoyvfi", "body": "Few things, you can run ruff in CI as opposed to Pylance. Ruff is editor agnostic, it's a CLI tool, you can run it the same way for Vim, VSCode and PyCharm. Ruff is way faster than any other available tool. Ruff can be configured using standard Python config files.\n\nI appreciate that Pylance is mostly just wrapped Pyright, which you can run in CI. But, I'd be nervous about consistency between editor and CI. This is not a problem with ruff", "created_on": 1681159786.0, "upvotes": 1, "author_id": "2v9jxndi", "author_name": "LordBertson"}, "239": {"post_id": "12ha6mc", "comment_id": "jfp4zh6", "parent_id": "t1_jfoyvfi", "body": "There's a big difference between having your tools run in 5 seconds versus 50 seconds. You'll be more willing to run them more often, which means you catch errors earlier and save more time.\n\nMaybe Ruff isn't a replacement for everything, but at the velocity it's been developed at, it wouldn't surprise me if it does end up replacing several existing tools.", "created_on": 1681136081.0, "upvotes": 16, "author_id": "369qx", "author_name": "AlSweigart"}, "240": {"post_id": "12ha6mc", "comment_id": "jfoj9nc", "parent_id": "t3_12ha6mc", "body": "I don't think people care too much about speed of linters, like 10x faster than flake8 is sure less than a second but at the moment what is it like 3-5 seconds even on fairly large codebases. I think the selling point here if it gets to widespread adoption is reducing the amount of dev dependencies because it's a pain to remember to keep them updated.", "created_on": 1681124080.0, "upvotes": 10, "author_id": "5nlxe", "author_name": "FlukyS"}, "241": {"post_id": "12ha6mc", "comment_id": "jfpkcsk", "parent_id": "t1_jfoj9nc", "body": "running black, isort, and flake8 on the codebase i work on currently takes about 35 sec. ruff does it in less than 1 sec.  since that\u2019s hooked into my IDE i think the performance is a breath of fresh air. \n\ni can see what you mean about 3s versus milliseconds. but given my use case ruff is a game changer", "created_on": 1681142417.0, "upvotes": 3, "author_id": "9wkmv", "author_name": "bmrobin"}, "242": {"post_id": "12ha6mc", "comment_id": "jfp0d6v", "parent_id": "t1_jfoj9nc", "body": "Yeah I'm not productive enough to pretend like shaving a couple seconds off every commit is big deal to me. Hell in the time it took me to read this thread, and make this comment, I've already wasted more time than the speed up of a specific linter would save me.", "created_on": 1681134000.0, "upvotes": 3, "author_id": "svbor", "author_name": "COLU_BUS"}, "243": {"post_id": "12ha6mc", "comment_id": "jfooh0x", "parent_id": "t1_jfoj9nc", "body": "It helps for CICD on larger codebases and big commits. It's rarely ever the longest part of any step, but it is useful to get results faster.", "created_on": 1681127626.0, "upvotes": 6, "author_id": "orzv4", "author_name": "Ryankey721"}, "244": {"post_id": "12ha6mc", "comment_id": "jfosrsp", "parent_id": "t1_jfoj9nc", "body": "If you're using it will null-ls or something to provide live feedback via lsp, I think speed matters. I find it strange the maintainers don't stress this use case, because that's one of the only times I think it matters.", "created_on": 1681130149.0, "upvotes": 6, "author_id": "4qou1", "author_name": "Datsoon"}, "245": {"post_id": "12ha6mc", "comment_id": "jfokmmw", "parent_id": "t1_jfoj9nc", "body": "I care about speed. I have real time linting set up in VSCodium. Works great with Ruff, but with other linters it takes like 10-20 seconds before any warnings show up.", "created_on": 1681125081.0, "upvotes": 16, "author_id": "jmhzcqes", "author_name": "zehkira"}, "246": {"post_id": "12ha6mc", "comment_id": "jfotmvd", "parent_id": "t1_jfoj9nc", "body": "> I don't think people care too much about speed of linters,\n\nI do. I have a good sized code base and gaining these seconds when you lint often is appreciated.", "created_on": 1681130620.0, "upvotes": 9, "author_id": "36n3l", "author_name": "chub79"}, "247": {"post_id": "12ha6mc", "comment_id": "jfojka9", "parent_id": "t1_jfoj9nc", "body": "It\u2019s annoying when a flake8 pre-commit hook takes a few seconds to run on a commit with lots of files. I treasure ruff for this reason.", "created_on": 1681124304.0, "upvotes": 36, "author_id": "d6ylo", "author_name": "pacific_plywood"}, "248": {"post_id": "12ha6mc", "comment_id": "jfoc2se", "parent_id": "t3_12ha6mc", "body": "Implementing custom plugins with only Python knowledge is out of the question at this point.", "created_on": 1681118025.0, "upvotes": 11, "author_id": "3vb52v1a", "author_name": "frostbaka"}, "249": {"post_id": "12ha6mc", "comment_id": "jfp5mwf", "parent_id": "t3_12ha6mc", "body": "We've migrate the Litestar (ex. Starlite) pipeline to this. I finished the setup of the new `pre-commit-config.yaml` and ran it. I almost fell off my chair - ruff was so incredibly fast. I'm not talking about a lot faster, it was about 100 times faster than the previous pipeline, and it actually improved on a huge amount of stuff we had.\n\nOne more thing - im somewhat of a nerd of linters, and have spent a great deal of time creating a great pipeline for our codebase. But I gotta hand it to ruff, it's a terrific tool that does as it's advertised.", "created_on": 1681136368.0, "upvotes": 10, "author_id": "9t15mit", "author_name": "Goldziher"}, "250": {"post_id": "12ha6mc", "comment_id": "jfp0739", "parent_id": "t3_12ha6mc", "body": "ruff replaced pylint and flake8 for me in my vim config (with ALE).\nIt offers almost everything that the others did, but it's blazing fast. And development is very strong, new checks get added all the time.", "created_on": 1681133921.0, "upvotes": 5, "author_id": "46ojb", "author_name": "jangeboers"}, "251": {"post_id": "12ha6mc", "comment_id": "jfohfww", "parent_id": "t3_12ha6mc", "body": "I started using ruff alongside flake8, pylint and the usual, and it's amazing how fast, how easily configurable it is and just generally pretty awesome. I hope I'll be able to convince my team to adopt it. It's just so much better.", "created_on": 1681122661.0, "upvotes": 22, "author_id": "kv20o", "author_name": "mikat7"}, "252": {"post_id": "12ha6mc", "comment_id": "jfoh3yg", "parent_id": "t3_12ha6mc", "body": "I have tried ruff out and it is very fast and catches lots of issues, but it is not mature enough to have earned the title of this post. Pylint is still more capable and can catch things like wrong parameters to functions and invalid imports. I won\u2019t be able to view ruff as more than a complimentary tool until it can catch these types of errors.", "created_on": 1681122388.0, "upvotes": 65, "author_id": "8z3uv", "author_name": "drphillycheesesteak"}, "253": {"post_id": "12ha6mc", "comment_id": "jfpfd0e", "parent_id": "t1_jfoh3yg", "body": "I have not been convinced by pylint compared to flake8. My intern used it on a project and introduced a bug that flake8 catched right away, which led me to ask to use the same tooling as me.", "created_on": 1681140415.0, "upvotes": 1, "author_id": "2z1idt46", "author_name": "LardPi"}, "254": {"post_id": "12ha6mc", "comment_id": "jfomc7o", "parent_id": "t1_jfoh3yg", "body": "Mypy catches those types of errors. And unlike Pylint it doesn't generate a stupid amount of false positives.", "created_on": 1681126249.0, "upvotes": 48, "author_id": "ohbbhypg", "author_name": "TrueAd3615"}, "255": {"post_id": "12ha6mc", "comment_id": "jfopzbr", "parent_id": "t3_12ha6mc", "body": "From what I've read, Ruff has two major strengths that are greatly superior to other Python linters:\n\n1. Speed. Ruff is very fast.\n2. Hype. Try searching Google to find out more about Ruff and there are pages of hits about how fast it is. Despite being the new kid on the block, Ruff has over 11k stars on GitHub vs flake8's 2.7k.\n\nThe amount of hype makes me suspicious. I have no doubt that Ruff is good (especially for speed), but it must surely have limitations.\n\nThe title of this reddit thread is a great example of excessive hype. I'd much prefer to read an informative review that looked at both pros and cons of Ruff compared with other (more mature) Python linters.", "created_on": 1681128542.0, "upvotes": 131, "author_id": "tocow5fl", "author_name": "JamzTyson"}, "256": {"post_id": "12ha6mc", "comment_id": "jfso8mi", "parent_id": "t1_jfopzbr", "body": "The best bit is that it combines multiple tools into one. I recently replaced isort and flake8 + various plugins with ruff and them even added more checks to our codebase.\n\nSo now I can say I like it black and ruff ;-)", "created_on": 1681192989.0, "upvotes": 1, "author_id": "5uu1o", "author_name": "mroximoron"}, "257": {"post_id": "12ha6mc", "comment_id": "jfrrqrt", "parent_id": "t1_jfopzbr", "body": "Its big limitation is that it eschews anything that can be fixed by `black`. So no `pycodestyle` checks. This is one of the reasons it's quick.\n\nThat, and no plugins.", "created_on": 1681175067.0, "upvotes": 1, "author_id": "7ooyh", "author_name": "wewbull"}, "258": {"post_id": "12ha6mc", "comment_id": "jfq6ow4", "parent_id": "t1_jfopzbr", "body": "...have you tried it though?", "created_on": 1681151117.0, "upvotes": 1, "author_id": "75sguhf", "author_name": "lmericle"}, "259": {"post_id": "12ha6mc", "comment_id": "jfs3mzs", "parent_id": "t1_jfopzbr", "body": "I can think of a few more:\n\n3. Configuration. Ruff's cascading configuration files (borrowed from ESlint), per-file-ignores (borrowed from flake8) and granular rule inclusion/exclusion give it the best configuration system I've seen. It's a godsend for large monorepos.\n4. No dependencies. Since it's written in rust there are no packages it depends on that could gum up your lock files.\n5. Single tool. Can replace (partially for now) many tools, simplifying lint configuration into a single place.", "created_on": 1681180533.0, "upvotes": 2, "author_id": "4629k", "author_name": "ahal"}, "260": {"post_id": "12ha6mc", "comment_id": "jfp9u3t", "parent_id": "t1_jfopzbr", "body": "I know it\u2019s anecdata but I think #2 is earned. I have been switching projects over as an alternative to resolving flake8 plug-in version conflicts (we use flake8\u2013eradicate) and it\u2019s basically trivial to switch and it makes editing and our pre-commit hooks notably faster since you have one thing to manage replacing flake8, isort, pylint, pyupgrade, bandit, etc.", "created_on": 1681138145.0, "upvotes": 5, "author_id": "1novk", "author_name": "acdha"}, "261": {"post_id": "12ha6mc", "comment_id": "jfs1kpd", "parent_id": "t1_jfopzbr", "body": "I appreciate this. I try to be clear and honest about Ruff's strengths and weaknesses -- there are some cursory answers in the [FAQ](https://beta.ruff.rs/docs/faq/#how-does-ruff-compare-to-flake8) RE comparisons to other tools -- but since the article mostly talked strengths, I'm happy to suggest a few \"reasons not to use Ruff\". I think about them a lot :)\n\n1. **No support for custom rules or plugins.** This is Ruff's biggest limitation right now. E.g., Flake8 has a robust plugin system, so anyone can extend Flake8 with custom rules. Ruff doesn't support that. (I'd like to support plugins in the future, but we're not working on it right now.)\n2. **\"Less powerful\" static analysis.** Compared to Pylint, Ruff is \"less powerful\" right now. It doesn't look across files, it can't catch things like \"wrong number of arguments provided to a function\", it doesn't really do any branch analysis, and so on. It's similar to Flake8, in that way. I'm certain that Ruff will improve here, but if you straight-up replace Pylint with Ruff, you might feel like you're missing certain kinds of analyses that Ruff can't yet support.\n3. **Less stable / more churn.** We still haven't published a \"stable release\". We're on version 0.0.260 or so. To be honest, we used to be a little more brazen about publishing breaking changes -- now that we have a bunch of projects relying on us, we're pretty careful and hesitant. But, it's true that you'd expect a tool like Flake8 or Pylint that's been around for years to give you less churn on configuration, diagnostics, etc.\n4. **You're happy with your linter.** If Ruff's strengths don't resonate with you, that's of course fine too. (Although you might be surprised. I think there are a lot of happy Ruff users who wouldn't have expected a \"faster linter\" to be impactful to them before they tried Ruff.)\n\nI hope that the hype around Ruff is just a sign that we're building something people like to use (though in reality I'm sure it's also luck). I get a ton of motivation out of reading comments like those in this thread. From my perspective, I really just try to focus on building out the tool itself, supporting contributors, and being responsive to issues.", "created_on": 1681179550.0, "upvotes": 5, "author_id": "36q0af05", "author_name": "charliermarsh"}, "262": {"post_id": "12ha6mc", "comment_id": "jfoy1fm", "parent_id": "t1_jfopzbr", "body": "> Hype\n\nSounds grumpy but that's not wrong. Ruff ending up as more notorious than Mypy is plain weird.\n\nThat's said I'm happy to drop redundant reformatters such as black and isort. I don't expect much from Ruff when it comes to check correctness, until it fully implements type checking. It's a lot of work.", "created_on": 1681132883.0, "upvotes": 13, "author_id": "2rzmw", "author_name": "aikii"}, "263": {"post_id": "12ha6mc", "comment_id": "jfpk4cn", "parent_id": "t1_jfopzbr", "body": "Ruff does sound really cool and is seeing some adoption among major projects, but it feels very much in beta right now, and does not (yet) integrate perfectly with IDEs, which I have no idea how anyone finds value in a linter that is not well integrated with their IDE.\n\nI tried to use the vscode extension but it was so poorly documented I couldn\u2019t make sense of the configs. Getting it working properly with the same config used in my pre-commit hook was difficult enough it was easier for me to just uninstall and go with a more well supported linter. It\u2019s more important to me that it\u2019s stable, well documented and easy to use than infinitely configurable and fast. \n\nAnd before someone tells me they figured it out no problem, you have to understand that I\u2019m an idiot, and its important to me to have idiot-proof tools. Ruff is not yet idiot proof, and looking at their docs and integrations it has a good bit to go before it is.", "created_on": 1681142323.0, "upvotes": 20, "author_id": "7pxby", "author_name": "ColdPorridge"}, "264": {"post_id": "12ha6mc", "comment_id": "jfpytet", "parent_id": "t1_jfopzbr", "body": "There are a few more. \n\n* It brings all of the functionality of flake8, isort, pyupgrade, and dozens of other tools into one tool. It's still faster than any one of those tools, and it's only one dependency.\n* The maintainer seems like a pleasant person who's willing to work with the community and enjoys what he's doing. Look through the issue tracker on flake8. 90% of them are closed and locked to contributors after a single reply of \"use the issue tracker\". When you google a problem you're having with flake8, the most likely top result is a closed issue that just says \"you clearly didn't search the issue tracker\". They clearly don't actually want to work on their own software, which I think drives people away. Charlie on the other hand is releasing several times a week and actively engaging on trying to solve issues without writing people off or shutting them down.\n* Related to the last one, flake8 has some issues that they won't fix seemingly just out of stubbornness, regardless of how much of a problem they cause to the community.\n   * They refuse to support pyproject.toml configuration despite overwhelming desire for it, and shut down threads for it with \"search the issue tracker\". The issue that explains their reasoning is copied from gitlab and near impossible to follow. \n   * They also pinned their dependency on importlib-metadata to < 4.3  for years for what was as far as I could tell a petty personal vendetta. This meant that flake8 couldn't be installed in the same environment as many other popular packages, such as Sphinx.", "created_on": 1681148069.0, "upvotes": 12, "author_id": "ubbjkanq", "author_name": "Physical_Drawer6740"}, "265": {"post_id": "12ha6mc", "comment_id": "jfpqah3", "parent_id": "t1_jfopzbr", "body": "I think the hype just comes from comparison to flake8.\n\nThe status quo was flake8 + flake8-bugbear + flake8-docstrings and a handful of other plugins. Performance sucked with extra plugins, and the maintainer being kind of close-minded really hurt what was possible (flat out refused pyproject.toml config and never accepted new lints). Pylint was an option, but the configuration experience was pretty terrible.\n\nEnter ruff: it gives us the simplicity of flake8, plus the features we didn\u2019t know we want - speed, no plugins necessary, pyproject.toml config, and a welcoming maintainer who\u2019s open to change. Everyone who tries it likes it better than the status quo, because the status quo was awkward and stale (but we just didn\u2019t really realize it)\n\nIt deserves the hype imho, I don\u2019t have a good reason to ever go back to flake8.", "created_on": 1681144775.0, "upvotes": 25, "author_id": "r7r1d", "author_name": "trevg_123"}, "266": {"post_id": "12ha6mc", "comment_id": "jforttz", "parent_id": "t1_jfopzbr", "body": "Talk Python has a great episode where Michael talks to Charlie Marsh, the creator of Ruff, about what it does, what its limitations are, and what his future plans are for it.\n\nThey cover comparisons with other tools and overlap/gaps in functionality. Even if you're not a podcast person, I really suggest giving it a listen.\n\n[https://talkpython.fm/episodes/show/400/ruff-the-fast-rust-based-python-linter](https://talkpython.fm/episodes/show/400/ruff-the-fast-rust-based-python-linter)\n\nAnd, if you are a podcast person, I'd seriously recommend listening to [Python Bytes](https://pythonbytes.fm/) and [Talk Python](https://talkpython.fm/). I wish every language had a Python Bytes style podcast.", "created_on": 1681129622.0, "upvotes": 74, "author_id": "nmjkw", "author_name": "pfeifnuts"}, "267": {"post_id": "12dfdq1", "comment_id": "jfamgsy", "parent_id": "t3_12dfdq1", "body": "Amazing. I needed a scrapper anyways and you gave me one", "created_on": 1680856124.0, "upvotes": 1, "author_id": "96fjxovn", "author_name": "Pyro_Jackson"}, "268": {"post_id": "12dfdq1", "comment_id": "jf6j5wo", "parent_id": "t3_12dfdq1", "body": "I need technical details. Where does the song being downloaded from, in which codec at what bitrate. Are the songs being reencoded? These questions are super relevant to judge the expected sound quality. Worst case you scrape Spotify playlists and get the songs from Youtube, which is super bad.", "created_on": 1680786627.0, "upvotes": -24, "author_id": "8vbwl", "author_name": "scinaty2"}, "269": {"post_id": "12dfdq1", "comment_id": "jf83xco", "parent_id": "t1_jf6j5wo", "body": "He literally posted a link in the post to the source code of his program with a detailed readme lol.\n\nI would understand if this were a music subreddit and asking you to look at the Git would be asking too much.\n\nBut this is /r/Python.", "created_on": 1680809392.0, "upvotes": 4, "author_id": "4ekiepkh", "author_name": "JollyJustice"}, "270": {"post_id": "12dfdq1", "comment_id": "jf6r86a", "parent_id": "t1_jf6j5wo", "body": "Have you tried reading the README? It looks to the relevant answers", "created_on": 1680790253.0, "upvotes": 20, "author_id": "duznv", "author_name": "wannabe414"}, "271": {"post_id": "12dfdq1", "comment_id": "jf8h0nd", "parent_id": "t3_12dfdq1", "body": "Little tip, use Pyinstaller to package your dependencies with your Python program. Saves people from having to mess with enviornments and packages.", "created_on": 1680814581.0, "upvotes": 4, "author_id": "6ns7k", "author_name": "Fenastus"}, "272": {"post_id": "12dfdq1", "comment_id": "jf6uejo", "parent_id": "t3_12dfdq1", "body": "Maybe I\u2019m missing something but have you not just made a tool to easily pirate music?", "created_on": 1680791563.0, "upvotes": 18, "author_id": "16mveu", "author_name": "pettenatib24"}, "273": {"post_id": "12dfdq1", "comment_id": "jf88nye", "parent_id": "t1_jf6uejo", "body": "There have been some tools in the past that allow you to download from Spotify (yes, actually download, not automated recording or something, you get the original Ogg file).\n\nI won\u2019t post any links, but those are easily findable on GitHub, not sure if it still works.\n\nFor most users, pirating is useless these days, just use Spotify and you\u2019re good. I wish there was some official integration in DJ software by Spotify, so you could build your set before having to buy the tracks first and then finding out they don\u2019t fit.", "created_on": 1680811265.0, "upvotes": 1, "author_id": "i650h", "author_name": "CeeMX"}, "274": {"post_id": "12dfdq1", "comment_id": "jf746dr", "parent_id": "t1_jf6uejo", "body": "What's the problem then", "created_on": 1680795456.0, "upvotes": 15, "author_id": "5vbpquk9", "author_name": "Nicola_ProNoob"}, "275": {"post_id": "12dfdq1", "comment_id": "jf7dvp8", "parent_id": "t1_jf6uejo", "body": "Well op did cross post it to /r/piracy", "created_on": 1680799217.0, "upvotes": 21, "author_id": "99a5p", "author_name": "CTR0"}, "276": {"post_id": "12dfdq1", "comment_id": "jf6szab", "parent_id": "t3_12dfdq1", "body": "Is this intended to NOT be used with a premium account? \n\nOr with?\n\nhttps://i.imgur.com/4GW4Mb2.png", "created_on": 1680790983.0, "upvotes": 12, "author_id": "f1in9", "author_name": "Yes_Dear_"}, "277": {"post_id": "12dfdq1", "comment_id": "jf6wnig", "parent_id": "t1_jf6szab", "body": "To avoid having your account banned, it won't let you use a premium account. \n\nJust open a throwaway. You don't need a premium account to download", "created_on": 1680792469.0, "upvotes": 24, "author_id": "3brony28", "author_name": "BeingHeldAgainstWill"}, "278": {"post_id": "12dfdq1", "comment_id": "jf81qr7", "parent_id": "t3_12dfdq1", "body": ">including the time-synced lyrics!\n\nOh you beautiful bastard.  \n\nI've been looking for a good ways to get these for a karaoke project I'm working on.  \n\nSerato Lite 3.0 is free DJ software that allows you to remove the vocals from a track with just a little bit of preprocessing. Now I have a way to hopefully sync the timecode on Serato with the timecode on the lyrics on the fly. \n\nWish me luck.", "created_on": 1680808531.0, "upvotes": 13, "author_id": "4ekiepkh", "author_name": "JollyJustice"}, "279": {"post_id": "12dfdq1", "comment_id": "jf896pd", "parent_id": "t1_jf81qr7", "body": "Serato can do that?", "created_on": 1680811472.0, "upvotes": 2, "author_id": "i650h", "author_name": "CeeMX"}, "280": {"post_id": "12dfdq1", "comment_id": "jf85ys7", "parent_id": "t1_jf81qr7", "body": "My pleasure! Good luck with your venture!\n\n&#x200B;\n\n \\- do be sure to not violate any intellectual property laws...", "created_on": 1680810205.0, "upvotes": 6, "author_id": "3brony28", "author_name": "BeingHeldAgainstWill"}, "281": {"post_id": "12dfdq1", "comment_id": "jf7f9x3", "parent_id": "t3_12dfdq1", "body": "Where are the keys from in keys.py and deezer_utils.py (in the get_blowfish_key method)? Are these based off of spotify/deezer applications? I think you may be leaking your keys.\n\nEDIT: Also scraping spotify premium cookies from rkstore is shady shit", "created_on": 1680799754.0, "upvotes": 19, "author_id": "99a5p", "author_name": "CTR0"}, "282": {"post_id": "12dfdq1", "comment_id": "jf8w838", "parent_id": "t1_jf7f9x3", "body": "Can you ELI5? Is this code dangerous to use for a dummy like me?", "created_on": 1680820975.0, "upvotes": 3, "author_id": "in9fs", "author_name": "is_it_fun"}, "283": {"post_id": "12dfdq1", "comment_id": "jf6i45b", "parent_id": "t3_12dfdq1", "body": "Working with Spotify is always a pain in the ass. Half of the good api endpoints are behind premium account. I\u2019ll check out your code sometime.", "created_on": 1680786122.0, "upvotes": 38, "author_id": "2x1wya5s", "author_name": "ZyanCarl"}, "284": {"post_id": "12dfdq1", "comment_id": "jf6l2s3", "parent_id": "t1_jf6i45b", "body": "I found a trick to authenticating with both a real user and an API bot at the same time. This somehow eliminated all restrictions!", "created_on": 1680787519.0, "upvotes": 33, "author_id": "3brony28", "author_name": "BeingHeldAgainstWill"}, "285": {"post_id": "12dfdq1", "comment_id": "jf690fa", "parent_id": "t3_12dfdq1", "body": "I\u2019m really curious as to how and why you could use it with ML.", "created_on": 1680781211.0, "upvotes": 47, "author_id": "r6xds45", "author_name": "subiacOSB"}, "286": {"post_id": "12dfdq1", "comment_id": "jf8qmwq", "parent_id": "t1_jf690fa", "body": "Why? Many things! Here\u2019s just a few for example:\n\nWill I like a song based on its melody?\n\nIs this an upbeat or relaxing song?\n\nWill this song make me happy or sad?\n\nWhat artists are similar to the artists I like?\n\nHow? Well you have to a little work before you can train a NN to categorize the above examples. You\u2019d need an answer key so that the algorithm can \u201clearn\u201d what the right answers are, and then can extrapolate it\u2019s results into data it\u2019s never seen before. \n\nSince this is a Python library, PyTorch could probably get the job done.", "created_on": 1680818532.0, "upvotes": 1, "author_id": "p7mid", "author_name": "Caveman112233"}, "287": {"post_id": "12dfdq1", "comment_id": "jf7rhpp", "parent_id": "t1_jf690fa", "body": "You can use ML to categorize by genre or predict if you would like a song.", "created_on": 1680804485.0, "upvotes": 2, "author_id": "fko1e", "author_name": "marvelmon"}, "288": {"post_id": "12dfdq1", "comment_id": "jf69cap", "parent_id": "t1_jf690fa", "body": "I actually this week wrote a song recommendation module which recommends songs based on the semantic similarity between their lyrics. \n\nPart of the code (heavily reliant on imports): https://github.com/Michael-K-Stein/Michael-K-Stein.github.io/blob/master/semantics.py", "created_on": 1680781414.0, "upvotes": 67, "author_id": "3brony28", "author_name": "BeingHeldAgainstWill"}, "289": {"post_id": "12cgplg", "comment_id": "jf3yy1p", "parent_id": "t3_12cgplg", "body": "SEO at work...", "created_on": 1680732201.0, "upvotes": -1, "author_id": "8tv39", "author_name": "Ninjakannon"}, "290": {"post_id": "12cgplg", "comment_id": "jfbh58g", "parent_id": "t3_12cgplg", "body": "This is a decent, concise intro to scraping.  Scraping is a great intellectual challenge, and a cracking way to learn python.  You can scrape anything if you put your mind to it.  I have resorted to wgetting the source and extracting the data from that if the site is complaining about no javascript.  Or even screenshot the page and OCR.\n\nPut in a few hours coding a decent bit scraping with Python and you'll come away knowing a hell lot more about programming, HTML, and that.\n\nThrow in some Pyautogui into the bargain.", "created_on": 1680876132.0, "upvotes": 2, "author_id": "rqiy662d", "author_name": "goochockipar"}, "291": {"post_id": "12cgplg", "comment_id": "jf5mv40", "parent_id": "t3_12cgplg", "body": " This is just GoLogin marketing", "created_on": 1680763278.0, "upvotes": 2, "author_id": "rl7lahl", "author_name": "jabellcu"}, "292": {"post_id": "12cgplg", "comment_id": "jf5nyqp", "parent_id": "t1_jf5mv40", "body": "Well, up to some point, yeah. Gologin is heavily used by scrapers, and I believe scraping will get harder with more and more anti-bot measures implemented. So, we try to deliver useful content to people involved in web dev. Python guides etc. Should be mentioned it's always the free plan scrapers use bc Gologin has great API access options.", "created_on": 1680764155.0, "upvotes": 1, "author_id": "bagwimeb", "author_name": "GoLoginS"}, "293": {"post_id": "12cgplg", "comment_id": "jf20wjj", "parent_id": "t3_12cgplg", "body": "Why are there so many tutorials on scraping? Is it a useful skill to have?", "created_on": 1680705380.0, "upvotes": 18, "author_id": "qna3f1w7", "author_name": "LennyNovo"}, "294": {"post_id": "12cgplg", "comment_id": "jf4epr1", "parent_id": "t1_jf20wjj", "body": "My first project was a scraper. Wrote my own library for it to learn requests and text manipulation. Then, I had to do another and another. I\u2019m probably just gonna re-learn BeautifulSoup cuz it\u2019s so recurring. For why, I\u2019d say they fall into a few categories:\n\n1. I wanted a copy of all the best submissions and comments on my favorite tech site (Lobste.rs) at one point. That was originally to experiment with better search features using local software. A third-party site with same content might facilitate better searching. Or ranking, curation, etc.\n\n2. Many sites are bloated. They can be slow at home. My job now puts me on the worst, mobile connection in the area. Like pi-hole or UBlock Origin, a scraper can let me get just what I need, transform it into a compact view, and send it over weak connection.\n\n3. Related is bypassing buggy UI. One example is BibleGateway which I pay for to use with my sites (see profile). I needed Spanish verses since I was serving Hispanic community, too. It had some feature that gives you all English or all Spanish translations if you ever pick one. Hard to go back. On such sites, it\u2019s easier to use a URL generator to reliably get to content you want. I also scraped out and spliced the key content into a minimalist, HTML page served over Flask. Got *way* faster!\n\n4. That brings us to custom UI\u2019s. One of old concepts for Web 3.0 was the provide data, we connect to it, and transform and view it however we want. You can approximate this with scraping combined with console, GUI, or web libraries. \n\n5. Old one is getting pricing and availability of something across markets. Comparison shopping. Many stores seem to realize making that easy, like with an API, can lead people to competition\u2019s better deals. Others have restrictive API\u2019s but no restrictions on main site. You might have to custom-make scrapers for sites that didn\u2019t try to present the info in a machine readable way. You can also sell or trade on this kind of info.\n\n6. Site uptime monitor. Scrapers can make for a basic monitor. You don\u2019t need to know networking. \n\nThere\u2019s just a few things I\u2019ve done or tried to do in the past month while learning Python.", "created_on": 1680739241.0, "upvotes": 9, "author_id": "iw119tej", "author_name": "heswithjesus"}, "295": {"post_id": "12cgplg", "comment_id": "jf2295t", "parent_id": "t1_jf20wjj", "body": "Scraping can generate an income comparable to a full time job. Organized data gets sold for enormous money these days. I know people who have scaled from 1 enthusiast to full on web scraping businesses with hired employees. So, yeah.", "created_on": 1680705924.0, "upvotes": 27, "author_id": "bagwimeb", "author_name": "GoLoginS"}, "296": {"post_id": "12cgplg", "comment_id": "jf42zno", "parent_id": "t3_12cgplg", "body": "Scraping government or publicly api available data is a breeze. Things get more complicated when your source is not in on the game. It can get quite challenging. Try scraping Amazon, and you'll see what I mean.", "created_on": 1680733948.0, "upvotes": 13, "author_id": "4w9ht3ao", "author_name": "andesouz"}, "297": {"post_id": "12cgplg", "comment_id": "jfeco83", "parent_id": "t1_jf42zno", "body": "^ for people on here trying to sell scraped data - govt stuff can be great. First there\u2019s almost never any question to it being public/allowed. Second it\u2019s often \u201cavailable\u201d but in an incredibly inconvenient way (like being published at the state or county level). \n\nThere\u2019s whole businesses which only scrape and normalize government data.", "created_on": 1680920600.0, "upvotes": 1, "author_id": "f4op1", "author_name": "thecarlosdanger1"}, "298": {"post_id": "12cgplg", "comment_id": "jf4fna6", "parent_id": "t1_jf42zno", "body": "I\u2019ve always thought it\u2019s an area the AI folks could put more attention into. Make one that would keep spotting the correct fields, saying no to the popups, applying coupon codes that actually work, doing shipping comparisons, reusing same supplier across items, etc. \n\nPeople might pay $20/mo for *that* if it would save them time and money on other stuff.", "created_on": 1680739661.0, "upvotes": 4, "author_id": "iw119tej", "author_name": "heswithjesus"}, "299": {"post_id": "12cgplg", "comment_id": "jf5on67", "parent_id": "t1_jf42zno", "body": "Anti bot measures (like most social platforms and server providers have) will only progress. The privacy browser gologin mentioned in the article helps with that. Try checking it out if you're somehow involved. It's used by scrapers heavily against Cloudflare and Kasada protected websites, etc.", "created_on": 1680764724.0, "upvotes": 3, "author_id": "bagwimeb", "author_name": "GoLoginS"}, "300": {"post_id": "12cgplg", "comment_id": "jf2qbrj", "parent_id": "t3_12cgplg", "body": "Ya I do this for fun.  How can I do this for money", "created_on": 1680715208.0, "upvotes": 30, "author_id": "hd8bs24t", "author_name": "Extreme_C_saw"}, "301": {"post_id": "12cgplg", "comment_id": "jf6c9kc", "parent_id": "t1_jf2qbrj", "body": "You have some shitty gouvernement site where you can find public data but not in full. You search and got partial results, not a big Excel or csv file with everything.\nIf you scrap it some people might want buy it.", "created_on": 1680783087.0, "upvotes": 2, "author_id": "abi4b", "author_name": "Lovecr4ft"}, "302": {"post_id": "12cgplg", "comment_id": "jf4pr8z", "parent_id": "t1_jf2qbrj", "body": "sammeee, I sit here and write scrapers for fun in my free time lmao. I watched a guy on Youtube who made scraping his job and he basically set up an API service and sells information and data to people who can use it. I think his specific job was collecting public data on court cases and the people in them and selling that to law firms etc... sounds boring but could be pretty lucrative.", "created_on": 1680744244.0, "upvotes": 12, "author_id": "v5av1", "author_name": "SweetBabyAlaska"}, "303": {"post_id": "12bl2uj", "comment_id": "jf1f77m", "parent_id": "t3_12bl2uj", "body": "Is the config package used in the code?", "created_on": 1680695001.0, "upvotes": 1, "author_id": "sa4e7q5x", "author_name": "thedeepself"}, "304": {"post_id": "12bl2uj", "comment_id": "jf1emmo", "parent_id": "t3_12bl2uj", "body": "Yaml is not in the requirements file but it is used in the source. Is Yaml a part of recent python releases?", "created_on": 1680694647.0, "upvotes": 1, "author_id": "sa4e7q5x", "author_name": "thedeepself"}, "305": {"post_id": "12bl2uj", "comment_id": "jf063ri", "parent_id": "t3_12bl2uj", "body": "great idea and execution !", "created_on": 1680662819.0, "upvotes": 1, "author_id": "4ymq4", "author_name": "viksi"}, "306": {"post_id": "12bl2uj", "comment_id": "jf017hf", "parent_id": "t3_12bl2uj", "body": "Ken Lay and Elvis are on a beach somewhere right now.", "created_on": 1680660535.0, "upvotes": 1, "author_id": "ecphpu07", "author_name": "MoistureFarmersOmlet"}, "307": {"post_id": "12bl2uj", "comment_id": "jf1l0uw", "parent_id": "t1_jf017hf", "body": "Good ol Kenny boy", "created_on": 1680698243.0, "upvotes": 1, "author_id": "89syl1dx", "author_name": "WhyDoIHaveAnAccount9"}, "308": {"post_id": "12bl2uj", "comment_id": "jezrcq0", "parent_id": "t3_12bl2uj", "body": "It is interesting how prior to the rise there is a distinct sea change, but nothing before it falls, only the fall itself seems to generate a reaction.\n\nI would love to somehow see this same thing for 1000s of other companies.\n\nI talked with someone who worked fairly near the top. They told me how fantastically defective the executives were, but that the whole collapse was not seen by anyone even though many afterword could point to all kinds of things and say, \"I should have known because of...\"", "created_on": 1680656130.0, "upvotes": 1, "author_id": "64fqe", "author_name": "EmperorOfCanada"}, "309": {"post_id": "12bl2uj", "comment_id": "jf052sc", "parent_id": "t3_12bl2uj", "body": "You know who else might like this, /r/ediscovery, that's the OG dataset for those folks.", "created_on": 1680662327.0, "upvotes": 2, "author_id": "4rwfr", "author_name": "StorkBaby"}, "310": {"post_id": "12bl2uj", "comment_id": "jez7iin", "parent_id": "t3_12bl2uj", "body": "cool, it's like an amoeba under a microscope.", "created_on": 1680647278.0, "upvotes": 2, "author_id": "u4hf9ba", "author_name": "liaisontosuccess"}, "311": {"post_id": "12bl2uj", "comment_id": "jez5abf", "parent_id": "t3_12bl2uj", "body": "Nice! That's a really good idea, definitely checking it out.\n\nRandom note about that dataset: I was inferencing with GPT-J-6B and randomly got back an email chain between some folks at enron, with bits of my prompt mixed in. It was fascinating", "created_on": 1680646302.0, "upvotes": 3, "author_id": "8um8szao", "author_name": "pointmetoyourmemory"}, "312": {"post_id": "12bl2uj", "comment_id": "jez4ubm", "parent_id": "t3_12bl2uj", "body": "This is REALLY cool.   \n\n\nI'm building a journaling app for high schoolers, and I think it would be really cool to have something similar. They enter their activity for the day and that data is sent to an AI api with a request to write a journal entry about what they accomplished that day in the voice of a person who is determined to live a healthy and fulfilled life by leaving a positive impact on the world. They then use that journal entry as a starter paragraph for a free-flow journaling session.   \n\n\nThe app will send weekly charts showing their adherence to positive habits and other metrics, but seeing this got me thinking that it would be cool to have something similar to analyze their free-flow sessions and compare it to things like what activities they are doing, etc.  \n\n\nawesome project here, thanks for sharing.", "created_on": 1680646110.0, "upvotes": 3, "author_id": "yk6qe", "author_name": "Oronoque"}, "313": {"post_id": "12bl2uj", "comment_id": "jeyzbmm", "parent_id": "t3_12bl2uj", "body": "This is super cool, and the Lexicon you're using could be very useful for a project I've been thinking about for awhile. Thank you for sharing!", "created_on": 1680643809.0, "upvotes": 3, "author_id": "8ch8uerez", "author_name": "Interesting_Flow730"}, "314": {"post_id": "12bl2uj", "comment_id": "jeysn09", "parent_id": "t3_12bl2uj", "body": "Can you also use this for stock analysis?", "created_on": 1680641090.0, "upvotes": 3, "author_id": "p44al9b", "author_name": "Lobbel1992"}, "315": {"post_id": "12bl2uj", "comment_id": "jeys4h0", "parent_id": "t3_12bl2uj", "body": "This is super nice. \nI am going to read your blog later.", "created_on": 1680640888.0, "upvotes": 3, "author_id": "p44al9b", "author_name": "Lobbel1992"}, "316": {"post_id": "12bl2uj", "comment_id": "jeyopru", "parent_id": "t3_12bl2uj", "body": "Super cool", "created_on": 1680639580.0, "upvotes": 3, "author_id": "c801x", "author_name": "wooyouknowit"}, "317": {"post_id": "12bl2uj", "comment_id": "jeyulrc", "parent_id": "t3_12bl2uj", "body": "interesting idea to analyze!\n\nhow would you differentiate 'trust' from 'following authority' here, I'd bet there was a lot of people who weren't in the know that were just doing their job, which is more coordinative than trusting", "created_on": 1680641885.0, "upvotes": 4, "author_id": "6nd9x5rp", "author_name": "iceytomatoes"}, "318": {"post_id": "12bl2uj", "comment_id": "jey92xc", "parent_id": "t3_12bl2uj", "body": "Neat.  Post it to /r/dataisbeautiful/", "created_on": 1680633548.0, "upvotes": 32, "author_id": "jxyse", "author_name": "athermop"}, "319": {"post_id": "12bl2uj", "comment_id": "jf05jxx", "parent_id": "t1_jey92xc", "body": "What's beautiful would be a plot showing all of this, not a YouTube video that shows the same information in a worse way", "created_on": 1680662553.0, "upvotes": 20, "author_id": "7ghyk", "author_name": "samreay"}, "320": {"post_id": "12bl2uj", "comment_id": "jey4n1s", "parent_id": "t3_12bl2uj", "body": "Bookmarking for after work. Seems right up my alley. Big data, Python, white collar crime!", "created_on": 1680631826.0, "upvotes": 21, "author_id": "6w1rk", "author_name": "steezefries"}, "321": {"post_id": "12bl2uj", "comment_id": "jeyxtqh", "parent_id": "t3_12bl2uj", "body": "are the emails public because they were used in the court cases?", "created_on": 1680643190.0, "upvotes": 11, "author_id": "v5tt4", "author_name": "Ruin369"}, "322": {"post_id": "12bl2uj", "comment_id": "jez63w8", "parent_id": "t1_jeyxtqh", "body": "yup. the emails that were exchanged between Enron employees were made public as part of the investigation. They've been used for a various number of reasons, though more recently it seems that they've become another small part of [the pile](https://pile.eleuther.ai), a dataset that quite a few language models are trained on.", "created_on": 1680646662.0, "upvotes": 18, "author_id": "8um8szao", "author_name": "pointmetoyourmemory"}, "323": {"post_id": "12bl2uj", "comment_id": "jeywttj", "parent_id": "t3_12bl2uj", "body": "your github link is not working as of 1612 central time\n\nEdit: 1900 central. Still getting 404\n\nEdit: this works -> https://github.com/SuperflowsAI/enron-sentiment-analysis\n\nCredit to u/ShadowDocket", "created_on": 1680642784.0, "upvotes": 23, "author_id": "89syl1dx", "author_name": "WhyDoIHaveAnAccount9"}, "324": {"post_id": "12bl2uj", "comment_id": "jf0v8f8", "parent_id": "t1_jeywttj", "body": "Whoops! Sorry about that. Looks like you found the right one! \n\nAccidently sent the private repo I was working from. Have edited the post to update this", "created_on": 1680678914.0, "upvotes": 2, "author_id": "alzl8hco", "author_name": "Ok-Craft-9908"}, "325": {"post_id": "12bl2uj", "comment_id": "jf00txb", "parent_id": "t1_jeywttj", "body": "[deleted]", "created_on": 1680660368.0, "upvotes": 9, "author_id": "deleted", "author_name": "deleted"}}}